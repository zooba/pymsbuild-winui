// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"
#include <winrt/Microsoft.UI.Xaml.Controls.h>

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AnchorRequestedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>(_self).repr(); })
        .def_property_readonly("Anchor", [](typename cvt<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>::cself_t _self) { return cvt_out(_self.Anchor()); })
        .def_property_readonly("AnchorCandidates", [](typename cvt<Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>::cself_t _self) { return cvt_out(_self.AnchorCandidates()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AnnotatedScrollBar(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AnnotatedScrollBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AnnotatedScrollBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AnnotatedScrollBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AnnotatedScrollBarDetailLabelRequestedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AnnotatedScrollBarDetailLabelRequestedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>(_self).repr(); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property_readonly("ScrollOffset", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>::cself_t _self) { return cvt_out(_self.ScrollOffset()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AnnotatedScrollBarLabel(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AnnotatedScrollBarLabel")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel>(_self).repr(); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_AnnotatedScrollBarScrollingEventKind(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind>(m, "Microsoft.UI.Xaml.Controls.AnnotatedScrollBarScrollingEventKind")
        .value("Click", Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind::Click)
        .value("Drag", Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind::Drag)
        .value("IncrementButton", Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind::IncrementButton)
        .value("DecrementButton", Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind::DecrementButton)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AnnotatedScrollBarScrollingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AnnotatedScrollBarScrollingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("ScrollingEventKind", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>::cself_t _self) { return cvt_out(_self.ScrollingEventKind()); })
        .def_property_readonly("ScrollOffset", [](typename cvt<Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>::cself_t _self) { return cvt_out(_self.ScrollOffset()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AppBar(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AppBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AppBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AppBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AppBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AppBar>(_self).repr(); })
        .def_property("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::cself_t _self) { return cvt_out(_self.IsOpen()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::self_t _self, typename cvt<decltype(_self.IsOpen())>::arg_t v) { cvt<decltype(_self.IsOpen())>::param_t cvt_v{v}; _self.IsOpen(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AppBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AppBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AppBarButton(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AppBarButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AppBarButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AppBarButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AppBarButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AppBarButton>(_self).repr(); })
        .def_property("Label", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.Label()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::self_t _self, typename cvt<decltype(_self.Label())>::arg_t v) { cvt<decltype(_self.Label())>::param_t cvt_v{v}; _self.Label(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AppBarButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AppBarButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AppBarToggleButton(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AppBarToggleButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AppBarToggleButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AppBarToggleButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AppBarToggleButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AppBarToggleButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::AppBarToggleButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
        .def_property("IsChecked", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.IsChecked()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<decltype(_self.IsChecked())>::arg_t v) { cvt<decltype(_self.IsChecked())>::param_t cvt_v{v}; _self.IsChecked(cvt_v); })
        .def_property("IsThreeState", [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::cself_t _self) { return cvt_out(_self.IsThreeState()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AppBarToggleButton>::self_t _self, typename cvt<decltype(_self.IsThreeState())>::arg_t v) { cvt<decltype(_self.IsThreeState())>::param_t cvt_v{v}; _self.IsThreeState(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AutoSuggestBox(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AutoSuggestBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AutoSuggestBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AutoSuggestBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AutoSuggestBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBox>(_self).repr(); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBox>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBox>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AutoSuggestBoxQuerySubmittedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>(_self).repr(); })
        .def_property_readonly("ChosenSuggestion", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>::cself_t _self) { return cvt_out(_self.ChosenSuggestion()); })
        .def_property_readonly("QueryText", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>::cself_t _self) { return cvt_out(_self.QueryText()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AutoSuggestBoxSuggestionChosenEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>(_self).repr(); })
        .def_property_readonly("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>::cself_t _self) { return cvt_out(_self.SelectedItem()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_AutoSuggestBoxTextChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>(_self).repr(); })
        .def("CheckCurrent", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>::self_t _self) {return cvt_out(_self.CheckCurrent()); })
        .def_property_readonly("Reason", [](typename cvt<Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>::cself_t _self) { return cvt_out(_self.Reason()); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_AutoSuggestionBoxTextChangeReason(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason>(m, "Microsoft.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason")
        .value("UserInput", Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason::UserInput)
        .value("ProgrammaticChange", Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason::ProgrammaticChange)
        .value("SuggestionChosen", Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason::SuggestionChosen)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_BitmapIcon(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::BitmapIcon, ::pywinui::holder<Microsoft::UI::Xaml::Controls::BitmapIcon>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.BitmapIcon")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::BitmapIcon>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::BitmapIcon>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::BitmapIcon>(_self).repr(); })
        .def_property("ShowAsMonochrome", [](typename cvt<Microsoft::UI::Xaml::Controls::BitmapIcon>::cself_t _self) { return cvt_out(_self.ShowAsMonochrome()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BitmapIcon>::self_t _self, typename cvt<decltype(_self.ShowAsMonochrome())>::arg_t v) { cvt<decltype(_self.ShowAsMonochrome())>::param_t cvt_v{v}; _self.ShowAsMonochrome(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_BitmapIconSource(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::BitmapIconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::BitmapIconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.BitmapIconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::BitmapIconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::BitmapIconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::BitmapIconSource>(_self).repr(); })
        .def_property("ShowAsMonochrome", [](typename cvt<Microsoft::UI::Xaml::Controls::BitmapIconSource>::cself_t _self) { return cvt_out(_self.ShowAsMonochrome()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BitmapIconSource>::self_t _self, typename cvt<decltype(_self.ShowAsMonochrome())>::arg_t v) { cvt<decltype(_self.ShowAsMonochrome())>::param_t cvt_v{v}; _self.ShowAsMonochrome(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Border(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Border, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Border>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Border")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Border>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Border>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Border>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Border>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Border>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Border>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Border>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Border::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Border>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Border::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_BreadcrumbBar(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::BreadcrumbBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::BreadcrumbBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.BreadcrumbBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::BreadcrumbBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::BreadcrumbBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::BreadcrumbBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_BreadcrumbBarItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.BreadcrumbBarItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::BreadcrumbBarItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::BreadcrumbBarItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_BreadcrumbBarItemClickedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.BreadcrumbBarItemClickedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>(_self).repr(); })
        .def_property_readonly("Index", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>::cself_t _self) { return cvt_out(_self.Index()); })
        .def_property_readonly("Item", [](typename cvt<Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>::cself_t _self) { return cvt_out(_self.Item()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Button(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Button, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Button>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Button")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Button>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Button>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Button::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Button::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::Button>::cself_t _self) { return cvt_out(_self.IsPressed()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CalendarDatePicker(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CalendarDatePicker, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CalendarDatePicker>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CalendarDatePicker")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CalendarDatePicker>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>(_self).repr(); })
        .def_property("Date", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.Date()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.Date())>::arg_t v) { cvt<decltype(_self.Date())>::param_t cvt_v{v}; _self.Date(cvt_v); })
        .def_property("DateFormat", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.DateFormat()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.DateFormat())>::arg_t v) { cvt<decltype(_self.DateFormat())>::param_t cvt_v{v}; _self.DateFormat(cvt_v); })
        .def_property("DisplayMode", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.DisplayMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.DisplayMode())>::arg_t v) { cvt<decltype(_self.DisplayMode())>::param_t cvt_v{v}; _self.DisplayMode(cvt_v); })
        .def_property("IsCalendarOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.IsCalendarOpen()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.IsCalendarOpen())>::arg_t v) { cvt<decltype(_self.IsCalendarOpen())>::param_t cvt_v{v}; _self.IsCalendarOpen(cvt_v); })
        .def_property("MaxDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.MaxDate()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.MaxDate())>::arg_t v) { cvt<decltype(_self.MaxDate())>::param_t cvt_v{v}; _self.MaxDate(cvt_v); })
        .def_property("MinDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.MinDate()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.MinDate())>::arg_t v) { cvt<decltype(_self.MinDate())>::param_t cvt_v{v}; _self.MinDate(cvt_v); })
        .def("SetDisplayDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<Windows::Foundation::DateTime>::arg_t date) {cvt<Windows::Foundation::DateTime>::param_t cvt_date{ date }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CalendarDatePicker::SetDisplayDate)>::value, "return value is not void"); _self.SetDisplayDate(cvt_date); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CalendarDatePicker::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CalendarDatePicker::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePicker>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CalendarDatePickerDateChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewDate()); })
        .def_property_readonly("OldDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldDate()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CalendarView(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CalendarView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CalendarView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CalendarView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CalendarView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CalendarView>(_self).repr(); })
        .def_property("MaxDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::cself_t _self) { return cvt_out(_self.MaxDate()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<decltype(_self.MaxDate())>::arg_t v) { cvt<decltype(_self.MaxDate())>::param_t cvt_v{v}; _self.MaxDate(cvt_v); })
        .def_property("MinDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::cself_t _self) { return cvt_out(_self.MinDate()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<decltype(_self.MinDate())>::arg_t v) { cvt<decltype(_self.MinDate())>::param_t cvt_v{v}; _self.MinDate(cvt_v); })
        .def("SetDisplayDate", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<Windows::Foundation::DateTime>::arg_t date) {cvt<Windows::Foundation::DateTime>::param_t cvt_date{ date }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CalendarView::SetDisplayDate)>::value, "return value is not void"); _self.SetDisplayDate(cvt_date); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CalendarView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CalendarView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CalendarView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_CalendarViewDisplayMode(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode>(m, "Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode")
        .value("Month", Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode::Month)
        .value("Year", Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode::Year)
        .value("Decade", Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode::Decade)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Canvas(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Canvas, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Canvas>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Canvas")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Canvas>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Canvas>(_self).repr(); })
        .def("GetLeft", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::self_t _self, typename cvt<Microsoft::UI::Xaml::UIElement>::arg_t element) {cvt<Microsoft::UI::Xaml::UIElement>::param_t cvt_element{ element }; return cvt_out(_self.GetLeft(cvt_element)); })
        .def("GetTop", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::self_t _self, typename cvt<Microsoft::UI::Xaml::UIElement>::arg_t element) {cvt<Microsoft::UI::Xaml::UIElement>::param_t cvt_element{ element }; return cvt_out(_self.GetTop(cvt_element)); })
        .def("GetZIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::self_t _self, typename cvt<Microsoft::UI::Xaml::UIElement>::arg_t element) {cvt<Microsoft::UI::Xaml::UIElement>::param_t cvt_element{ element }; return cvt_out(_self.GetZIndex(cvt_element)); })
        .def("SetLeft", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::self_t _self, typename cvt<Microsoft::UI::Xaml::UIElement>::arg_t element, typename cvt<double>::arg_t length) {cvt<Microsoft::UI::Xaml::UIElement>::param_t cvt_element{ element }; cvt<double>::param_t cvt_length{ length }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Canvas::SetLeft)>::value, "return value is not void"); _self.SetLeft(cvt_element, cvt_length); })
        .def("SetTop", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::self_t _self, typename cvt<Microsoft::UI::Xaml::UIElement>::arg_t element, typename cvt<double>::arg_t length) {cvt<Microsoft::UI::Xaml::UIElement>::param_t cvt_element{ element }; cvt<double>::param_t cvt_length{ length }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Canvas::SetTop)>::value, "return value is not void"); _self.SetTop(cvt_element, cvt_length); })
        .def("SetZIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Canvas>::self_t _self, typename cvt<Microsoft::UI::Xaml::UIElement>::arg_t element, typename cvt<int>::arg_t value) {cvt<Microsoft::UI::Xaml::UIElement>::param_t cvt_element{ element }; cvt<int>::param_t cvt_value{ value }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Canvas::SetZIndex)>::value, "return value is not void"); _self.SetZIndex(cvt_element, cvt_value); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_CharacterCasing(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::CharacterCasing>(m, "Microsoft.UI.Xaml.Controls.CharacterCasing")
        .value("Normal", Microsoft::UI::Xaml::Controls::CharacterCasing::Normal)
        .value("Lower", Microsoft::UI::Xaml::Controls::CharacterCasing::Lower)
        .value("Upper", Microsoft::UI::Xaml::Controls::CharacterCasing::Upper)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CheckBox(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CheckBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CheckBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CheckBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CheckBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CheckBox>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CheckBox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CheckBox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.IsPressed()); })
        .def_property("IsChecked", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.IsChecked()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<decltype(_self.IsChecked())>::arg_t v) { cvt<decltype(_self.IsChecked())>::param_t cvt_v{v}; _self.IsChecked(cvt_v); })
        .def_property("IsThreeState", [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::cself_t _self) { return cvt_out(_self.IsThreeState()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CheckBox>::self_t _self, typename cvt<decltype(_self.IsThreeState())>::arg_t v) { cvt<decltype(_self.IsThreeState())>::param_t cvt_v{v}; _self.IsThreeState(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ChoosingGroupHeaderContainerEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>(_self).repr(); })
        .def_property_readonly("Group", [](typename cvt<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>::cself_t _self) { return cvt_out(_self.Group()); })
        .def_property_readonly("GroupIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>::cself_t _self) { return cvt_out(_self.GroupIndex()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ChoosingItemContainerEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>(_self).repr(); })
        .def_property_readonly("Item", [](typename cvt<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>::cself_t _self) { return cvt_out(_self.Item()); })
        .def_property_readonly("ItemIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>::cself_t _self) { return cvt_out(_self.ItemIndex()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CleanUpVirtualizedItemEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("UIElement", [](typename cvt<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>::cself_t _self) { return cvt_out(_self.UIElement()); })
        .def_property_readonly("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>::cself_t _self) { return cvt_out(_self.Value()); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_ClickMode(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::ClickMode>(m, "Microsoft.UI.Xaml.Controls.ClickMode")
        .value("Release", Microsoft::UI::Xaml::Controls::ClickMode::Release)
        .value("Press", Microsoft::UI::Xaml::Controls::ClickMode::Press)
        .value("Hover", Microsoft::UI::Xaml::Controls::ClickMode::Hover)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ColorChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ColorChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewColor", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewColor()); })
        .def_property_readonly("OldColor", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldColor()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ColorPicker(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ColorPicker, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ColorPicker>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ColorPicker")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ColorPicker>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ColorPicker>(_self).repr(); })
        .def_property("Color", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.Color()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<decltype(_self.Color())>::arg_t v) { cvt<decltype(_self.Color())>::param_t cvt_v{v}; _self.Color(cvt_v); })
        .def_property("ColorSpectrumComponents", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.ColorSpectrumComponents()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<decltype(_self.ColorSpectrumComponents())>::arg_t v) { cvt<decltype(_self.ColorSpectrumComponents())>::param_t cvt_v{v}; _self.ColorSpectrumComponents(cvt_v); })
        .def_property("ColorSpectrumShape", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.ColorSpectrumShape()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<decltype(_self.ColorSpectrumShape())>::arg_t v) { cvt<decltype(_self.ColorSpectrumShape())>::param_t cvt_v{v}; _self.ColorSpectrumShape(cvt_v); })
        .def_property("PreviousColor", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.PreviousColor()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<decltype(_self.PreviousColor())>::arg_t v) { cvt<decltype(_self.PreviousColor())>::param_t cvt_v{v}; _self.PreviousColor(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ColorPicker::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ColorPicker::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ColorPicker>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_ColorSpectrumComponents(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>(m, "Microsoft.UI.Xaml.Controls.ColorSpectrumComponents")
        .value("HueValue", Microsoft::UI::Xaml::Controls::ColorSpectrumComponents::HueValue)
        .value("ValueHue", Microsoft::UI::Xaml::Controls::ColorSpectrumComponents::ValueHue)
        .value("HueSaturation", Microsoft::UI::Xaml::Controls::ColorSpectrumComponents::HueSaturation)
        .value("SaturationHue", Microsoft::UI::Xaml::Controls::ColorSpectrumComponents::SaturationHue)
        .value("SaturationValue", Microsoft::UI::Xaml::Controls::ColorSpectrumComponents::SaturationValue)
        .value("ValueSaturation", Microsoft::UI::Xaml::Controls::ColorSpectrumComponents::ValueSaturation)
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_ColorSpectrumShape(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::ColorSpectrumShape>(m, "Microsoft.UI.Xaml.Controls.ColorSpectrumShape")
        .value("Box", Microsoft::UI::Xaml::Controls::ColorSpectrumShape::Box)
        .value("Ring", Microsoft::UI::Xaml::Controls::ColorSpectrumShape::Ring)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ComboBox(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ComboBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ComboBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ComboBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ComboBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ComboBox>(_self).repr(); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ComboBox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ComboBox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBox>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ComboBoxItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ComboBoxItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ComboBoxItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ComboBoxItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ComboBoxItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ComboBoxItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ComboBoxItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ComboBoxTextSubmittedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>(_self).repr(); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
        .def_property_readonly("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>::cself_t _self) { return cvt_out(_self.Text()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CommandBar(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CommandBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CommandBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CommandBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CommandBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CommandBar>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_CommandBarFlyout(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::CommandBarFlyout, ::pywinui::holder<Microsoft::UI::Xaml::Controls::CommandBarFlyout>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.CommandBarFlyout")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::CommandBarFlyout>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>(_self).repr(); })
        .def_property("ElementSoundMode", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::cself_t _self) { return cvt_out(_self.ElementSoundMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::self_t _self, typename cvt<decltype(_self.ElementSoundMode())>::arg_t v) { cvt<decltype(_self.ElementSoundMode())>::param_t cvt_v{v}; _self.ElementSoundMode(cvt_v); })
        .def_property_readonly("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::cself_t _self) { return cvt_out(_self.IsOpen()); })
        .def_property("ShowMode", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::cself_t _self) { return cvt_out(_self.ShowMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::self_t _self, typename cvt<decltype(_self.ShowMode())>::arg_t v) { cvt<decltype(_self.ShowMode())>::param_t cvt_v{v}; _self.ShowMode(cvt_v); })
        .def("Hide", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::CommandBarFlyout::Hide)>::value, "return value is not void"); _self.Hide(); })
        .def("ShowAt", [](typename cvt<Microsoft::UI::Xaml::Controls::CommandBarFlyout>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t placementTarget, typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::arg_t showOptions) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_placementTarget{ placementTarget }; cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::param_t cvt_showOptions{ showOptions }; _self.ShowAt(cvt_placementTarget, cvt_showOptions); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContainerContentChangingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>(_self).repr(); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
        .def_property_readonly("InRecycleQueue", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt_out(_self.InRecycleQueue()); })
        .def_property_readonly("Item", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt_out(_self.Item()); })
        .def_property_readonly("ItemContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt_out(_self.ItemContainer()); })
        .def_property_readonly("ItemIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt_out(_self.ItemIndex()); })
        .def_property_readonly("Phase", [](typename cvt<Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>::cself_t _self) { return cvt_out(_self.Phase()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentControl(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentControl, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentControl>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentControl")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentControl>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentControl>(_self).repr(); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentControl::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentControl::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentControl>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialog(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialog, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialog>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialog")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialog>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialog>(_self).repr(); })
        .def_property("CloseButtonText", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.CloseButtonText()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.CloseButtonText())>::arg_t v) { cvt<decltype(_self.CloseButtonText())>::param_t cvt_v{v}; _self.CloseButtonText(cvt_v); })
        .def_property("DefaultButton", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.DefaultButton()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.DefaultButton())>::arg_t v) { cvt<decltype(_self.DefaultButton())>::param_t cvt_v{v}; _self.DefaultButton(cvt_v); })
        .def_property("IsPrimaryButtonEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.IsPrimaryButtonEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.IsPrimaryButtonEnabled())>::arg_t v) { cvt<decltype(_self.IsPrimaryButtonEnabled())>::param_t cvt_v{v}; _self.IsPrimaryButtonEnabled(cvt_v); })
        .def_property("IsSecondaryButtonEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.IsSecondaryButtonEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.IsSecondaryButtonEnabled())>::arg_t v) { cvt<decltype(_self.IsSecondaryButtonEnabled())>::param_t cvt_v{v}; _self.IsSecondaryButtonEnabled(cvt_v); })
        .def_property("PrimaryButtonText", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.PrimaryButtonText()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.PrimaryButtonText())>::arg_t v) { cvt<decltype(_self.PrimaryButtonText())>::param_t cvt_v{v}; _self.PrimaryButtonText(cvt_v); })
        .def_property("SecondaryButtonText", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.SecondaryButtonText()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.SecondaryButtonText())>::arg_t v) { cvt<decltype(_self.SecondaryButtonText())>::param_t cvt_v{v}; _self.SecondaryButtonText(cvt_v); })
        .def_property("Title", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.Title()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.Title())>::arg_t v) { cvt<decltype(_self.Title())>::param_t cvt_v{v}; _self.Title(cvt_v); })
        .def("Hide", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentDialog::Hide)>::value, "return value is not void"); _self.Hide(); })
        .def("ShowAsync", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self) {return cvt_out(_self.ShowAsync()); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentDialog::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentDialog::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialog>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_ContentDialogButton(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::ContentDialogButton>(m, "Microsoft.UI.Xaml.Controls.ContentDialogButton")
        .value("None", Microsoft::UI::Xaml::Controls::ContentDialogButton::None)
        .value("Primary", Microsoft::UI::Xaml::Controls::ContentDialogButton::Primary)
        .value("Secondary", Microsoft::UI::Xaml::Controls::ContentDialogButton::Secondary)
        .value("Close", Microsoft::UI::Xaml::Controls::ContentDialogButton::Close)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialogButtonClickDeferral(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialogButtonClickDeferral")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>(_self).repr(); })
        .def("Complete", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral::Complete)>::value, "return value is not void"); _self.Complete(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialogButtonClickEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def("GetDeferral", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>::self_t _self) {return cvt_out(_self.GetDeferral()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialogClosedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>(_self).repr(); })
        .def_property_readonly("Result", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>::cself_t _self) { return cvt_out(_self.Result()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialogClosingDeferral(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialogClosingDeferral")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>(_self).repr(); })
        .def("Complete", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral::Complete)>::value, "return value is not void"); _self.Complete(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialogClosingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("Result", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>::cself_t _self) { return cvt_out(_self.Result()); })
        .def("GetDeferral", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>::self_t _self) {return cvt_out(_self.GetDeferral()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentDialogOpenedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs>(_self).repr(); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_ContentDialogResult(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::ContentDialogResult>(m, "Microsoft.UI.Xaml.Controls.ContentDialogResult")
        .value("None", Microsoft::UI::Xaml::Controls::ContentDialogResult::None)
        .value("Primary", Microsoft::UI::Xaml::Controls::ContentDialogResult::Primary)
        .value("Secondary", Microsoft::UI::Xaml::Controls::ContentDialogResult::Secondary)
    ;
}

void add_asyncop_Microsoft_UI_Xaml_Controls_ContentDialogResult(const py::module_ &m) {
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContentPresenter(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContentPresenter, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContentPresenter>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContentPresenter")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContentPresenter>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>(_self).repr(); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentPresenter::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ContentPresenter>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ContentPresenter::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ContextMenuEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ContextMenuEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>(_self).repr(); })
        .def_property_readonly("CursorLeft", [](typename cvt<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>::cself_t _self) { return cvt_out(_self.CursorLeft()); })
        .def_property_readonly("CursorTop", [](typename cvt<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>::cself_t _self) { return cvt_out(_self.CursorTop()); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Control(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Control, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Control>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Control")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Control>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Control>(_self).repr(); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Control::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Control>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Control::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DatePickedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DatePickedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DatePickedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DatePickedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DatePickedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DatePickedEventArgs>(_self).repr(); })
        .def_property_readonly("NewDate", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickedEventArgs>::cself_t _self) { return cvt_out(_self.NewDate()); })
        .def_property_readonly("OldDate", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickedEventArgs>::cself_t _self) { return cvt_out(_self.OldDate()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DatePicker(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DatePicker, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DatePicker>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DatePicker")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DatePicker>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DatePicker>(_self).repr(); })
        .def_property("Date", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt_out(_self.Date()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<decltype(_self.Date())>::arg_t v) { cvt<decltype(_self.Date())>::param_t cvt_v{v}; _self.Date(cvt_v); })
        .def_property("MaxYear", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt_out(_self.MaxYear()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<decltype(_self.MaxYear())>::arg_t v) { cvt<decltype(_self.MaxYear())>::param_t cvt_v{v}; _self.MaxYear(cvt_v); })
        .def_property("MinYear", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt_out(_self.MinYear()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<decltype(_self.MinYear())>::arg_t v) { cvt<decltype(_self.MinYear())>::param_t cvt_v{v}; _self.MinYear(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::DatePicker::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::DatePicker::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DatePicker>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DatePickerFlyout(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DatePickerFlyout, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DatePickerFlyout>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DatePickerFlyout")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DatePickerFlyout>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerFlyout>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DatePickerFlyout>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DatePickerSelectedValueChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewDate", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewDate()); })
        .def_property_readonly("OldDate", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldDate()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DatePickerValueChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewDate", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewDate()); })
        .def_property_readonly("OldDate", [](typename cvt<Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldDate()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DragItemsCompletedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>(_self).repr(); })
        .def_property_readonly("DropResult", [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>::cself_t _self) { return cvt_out(_self.DropResult()); })
        .def_property_readonly("Items", [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>::cself_t _self) { return cvt_out(_self.Items()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DragItemsStartingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("Data", [](typename cvt<Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>::cself_t _self) { return cvt_out(_self.Data()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DropDownButton(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DropDownButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DropDownButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DropDownButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DropDownButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DropDownButton>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::DropDownButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::DropDownButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::DropDownButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_DynamicOverflowItemsChangingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Expander(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Expander, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Expander>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Expander")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Expander>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Expander>(_self).repr(); })
        .def_property("IsExpanded", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::cself_t _self) { return cvt_out(_self.IsExpanded()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::self_t _self, typename cvt<decltype(_self.IsExpanded())>::arg_t v) { cvt<decltype(_self.IsExpanded())>::param_t cvt_v{v}; _self.IsExpanded(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Expander::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Expander::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Expander>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ExpanderCollapsedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ExpanderCollapsedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ExpanderExpandingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ExpanderExpandingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FlipView(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FlipView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FlipView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FlipView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FlipView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FlipView>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FlipView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FlipView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipView>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FlipViewItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FlipViewItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FlipViewItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FlipViewItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FlipViewItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FlipViewItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FlipViewItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlipViewItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Flyout(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Flyout, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Flyout>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Flyout")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Flyout>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Flyout>(_self).repr(); })
        .def_property("ElementSoundMode", [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::cself_t _self) { return cvt_out(_self.ElementSoundMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::self_t _self, typename cvt<decltype(_self.ElementSoundMode())>::arg_t v) { cvt<decltype(_self.ElementSoundMode())>::param_t cvt_v{v}; _self.ElementSoundMode(cvt_v); })
        .def_property_readonly("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::cself_t _self) { return cvt_out(_self.IsOpen()); })
        .def_property("ShowMode", [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::cself_t _self) { return cvt_out(_self.ShowMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::self_t _self, typename cvt<decltype(_self.ShowMode())>::arg_t v) { cvt<decltype(_self.ShowMode())>::param_t cvt_v{v}; _self.ShowMode(cvt_v); })
        .def("Hide", [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Flyout::Hide)>::value, "return value is not void"); _self.Hide(); })
        .def("ShowAt", [](typename cvt<Microsoft::UI::Xaml::Controls::Flyout>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t placementTarget, typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::arg_t showOptions) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_placementTarget{ placementTarget }; cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::param_t cvt_showOptions{ showOptions }; _self.ShowAt(cvt_placementTarget, cvt_showOptions); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FlyoutPresenter(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FlyoutPresenter, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FlyoutPresenter>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FlyoutPresenter")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FlyoutPresenter>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FlyoutPresenter::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FlyoutPresenter::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FlyoutPresenter>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FocusDisengagedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FocusEngagedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FontIcon(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FontIcon, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FontIcon>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FontIcon")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FontIcon>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FontIcon>(_self).repr(); })
        .def_property("Glyph", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::cself_t _self) { return cvt_out(_self.Glyph()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::self_t _self, typename cvt<decltype(_self.Glyph())>::arg_t v) { cvt<decltype(_self.Glyph())>::param_t cvt_v{v}; _self.Glyph(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FontIcon::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::FontIcon::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_FontIconSource(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::FontIconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::FontIconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.FontIconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::FontIconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::FontIconSource>(_self).repr(); })
        .def_property("Glyph", [](typename cvt<Microsoft::UI::Xaml::Controls::FontIconSource>::cself_t _self) { return cvt_out(_self.Glyph()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::FontIconSource>::self_t _self, typename cvt<decltype(_self.Glyph())>::arg_t v) { cvt<decltype(_self.Glyph())>::param_t cvt_v{v}; _self.Glyph(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Frame(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Frame, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Frame>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Frame")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Frame>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Frame>(_self).repr(); })
        .def_property_readonly("CanGoBack", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt_out(_self.CanGoBack()); })
        .def_property_readonly("CanGoForward", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt_out(_self.CanGoForward()); })
        .def("GetNavigationState", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self) {return cvt_out(_self.GetNavigationState()); })
        .def("GoBack", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self) {_self.GoBack(); })
        .def("GoForward", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Frame::GoForward)>::value, "return value is not void"); _self.GoForward(); })
        .def("Navigate", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<Windows::UI::Xaml::Interop::TypeName>::arg_t sourcePageType, typename cvt<Windows::Foundation::IInspectable>::arg_t parameter) {cvt<Windows::UI::Xaml::Interop::TypeName>::param_t cvt_sourcePageType{ sourcePageType }; cvt<Windows::Foundation::IInspectable>::param_t cvt_parameter{ parameter }; return cvt_out(_self.Navigate(cvt_sourcePageType, cvt_parameter)); })
        .def("SetNavigationState", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<winrt::hstring>::arg_t navigationState, typename cvt<bool>::arg_t suppressNavigate) {cvt<winrt::hstring>::param_t cvt_navigationState{ navigationState }; cvt<bool>::param_t cvt_suppressNavigate{ suppressNavigate }; _self.SetNavigationState(cvt_navigationState, cvt_suppressNavigate); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Frame::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Frame::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Frame>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Grid(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Grid, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Grid>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Grid")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Grid>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Grid>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Grid>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Grid>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Grid>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Grid>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Grid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Grid::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Grid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Grid::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_GridView(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::GridView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::GridView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.GridView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::GridView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::GridView>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def("DeselectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridView::DeselectRange)>::value, "return value is not void"); _self.DeselectRange(cvt_itemIndexRange); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridView::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def("SelectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridView::SelectRange)>::value, "return value is not void"); _self.SelectRange(cvt_itemIndexRange); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridView>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_GridViewHeaderItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::GridViewHeaderItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.GridViewHeaderItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridViewHeaderItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridViewHeaderItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewHeaderItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_GridViewItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::GridViewItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::GridViewItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.GridViewItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::GridViewItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::GridViewItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridViewItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GridViewItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GridViewItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_GroupItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::GroupItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::GroupItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.GroupItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::GroupItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::GroupItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GroupItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::GroupItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::GroupItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_HasValidationErrorsChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HasValidationErrorsChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewValue", [](typename cvt<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewValue()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Hub(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Hub, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Hub>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Hub")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Hub>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Hub>(_self).repr(); })
        .def("ScrollToSection", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::arg_t section) {cvt<Microsoft::UI::Xaml::Controls::HubSection>::param_t cvt_section{ section }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Hub::ScrollToSection)>::value, "return value is not void"); _self.ScrollToSection(cvt_section); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Hub::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Hub::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_HubSection(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::HubSection, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HubSection>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HubSection")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HubSection>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HubSection>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HubSection::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HubSection::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_HubSectionHeaderClickEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>(_self).repr(); })
        .def_property_readonly("Section", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>::cself_t _self) { return cvt_out(_self.Section()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_HyperlinkButton(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::HyperlinkButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HyperlinkButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HyperlinkButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HyperlinkButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>(_self).repr(); })
        .def_property("NavigateUri", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.NavigateUri()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.NavigateUri())>::arg_t v) { cvt<decltype(_self.NavigateUri())>::param_t cvt_v{v}; _self.NavigateUri(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HyperlinkButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HyperlinkButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_IconElement(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::IconElement, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IconElement>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IconElement")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IconElement>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IconElement>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconElement::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconElement::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_IconSource(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::IconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IconSource>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_IconSourceElement(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::IconSourceElement, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IconSourceElement>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IconSourceElement")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IconSourceElement>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconSourceElement::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconSourceElement::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Image(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Image, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Image>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Image")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Image>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Image>(_self).repr(); })
        .def("GetAsCastingSource", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self) {return cvt_out(_self.GetAsCastingSource()); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Image::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Image::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ImageIcon(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ImageIcon, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ImageIcon>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ImageIcon")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ImageIcon>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ImageIcon>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ImageIcon::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ImageIcon::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ImageIconSource(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ImageIconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ImageIconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ImageIconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ImageIconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ImageIconSource>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_InfoBadge(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBadge, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBadge>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBadge")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBadge>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBadge>(_self).repr(); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBadge::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBadge::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_InfoBar(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBar>(_self).repr(); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("Message", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Message()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Message())>::arg_t v) { cvt<decltype(_self.Message())>::param_t cvt_v{v}; _self.Message(cvt_v); })
        .def_property("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.IsOpen()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.IsOpen())>::arg_t v) { cvt<decltype(_self.IsOpen())>::param_t cvt_v{v}; _self.IsOpen(cvt_v); })
        .def_property("Severity", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Severity()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Severity())>::arg_t v) { cvt<decltype(_self.Severity())>::param_t cvt_v{v}; _self.Severity(cvt_v); })
        .def_property("Title", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Title()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Title())>::arg_t v) { cvt<decltype(_self.Title())>::param_t cvt_v{v}; _self.Title(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_InfoBarClosedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>(_self).repr(); })
        .def_property_readonly("Reason", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>::cself_t _self) { return cvt_out(_self.Reason()); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_InfoBarCloseReason(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::InfoBarCloseReason>(m, "Microsoft.UI.Xaml.Controls.InfoBarCloseReason")
        .value("CloseButton", Microsoft::UI::Xaml::Controls::InfoBarCloseReason::CloseButton)
        .value("Programmatic", Microsoft::UI::Xaml::Controls::InfoBarCloseReason::Programmatic)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_InfoBarClosingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("Reason", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::cself_t _self) { return cvt_out(_self.Reason()); })
    ;
}

void add_enum_Microsoft_UI_Xaml_Controls_InfoBarSeverity(const py::module_ &m) {
    py::enum_<Microsoft::UI::Xaml::Controls::InfoBarSeverity>(m, "Microsoft.UI.Xaml.Controls.InfoBarSeverity")
        .value("Informational", Microsoft::UI::Xaml::Controls::InfoBarSeverity::Informational)
        .value("Success", Microsoft::UI::Xaml::Controls::InfoBarSeverity::Success)
        .value("Warning", Microsoft::UI::Xaml::Controls::InfoBarSeverity::Warning)
        .value("Error", Microsoft::UI::Xaml::Controls::InfoBarSeverity::Error)
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_IsTextTrimmedChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>(_self).repr(); })
    ;
}

