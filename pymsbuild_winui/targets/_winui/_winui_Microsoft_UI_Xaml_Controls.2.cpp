// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextBlock(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextBlock, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextBlock>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextBlock")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextBlock>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextBlock>(_self).repr(); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
        .def("CopySelectionToClipboard", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBlock::CopySelectionToClipboard)>::value, "return value is not void"); _self.CopySelectionToClipboard(); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBlock::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBlock::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBlock>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBlock::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextBox(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextBox>(_self).repr(); })
        .def_property("SelectionLength", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt_out(_self.SelectionLength()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<decltype(_self.SelectionLength())>::arg_t v) { cvt<decltype(_self.SelectionLength())>::param_t cvt_v{v}; _self.SelectionLength(cvt_v); })
        .def_property("SelectionStart", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt_out(_self.SelectionStart()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<decltype(_self.SelectionStart())>::arg_t v) { cvt<decltype(_self.SelectionStart())>::param_t cvt_v{v}; _self.SelectionStart(cvt_v); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
        .def("ClearUndoRedoHistory", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::ClearUndoRedoHistory)>::value, "return value is not void"); _self.ClearUndoRedoHistory(); })
        .def("CopySelectionToClipboard", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::CopySelectionToClipboard)>::value, "return value is not void"); _self.CopySelectionToClipboard(); })
        .def("CutSelectionToClipboard", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::CutSelectionToClipboard)>::value, "return value is not void"); _self.CutSelectionToClipboard(); })
        .def("PasteFromClipboard", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::PasteFromClipboard)>::value, "return value is not void"); _self.PasteFromClipboard(); })
        .def("Redo", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::Redo)>::value, "return value is not void"); _self.Redo(); })
        .def("Select", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<int>::arg_t start, typename cvt<int>::arg_t length) {cvt<int>::param_t cvt_start{ start }; cvt<int>::param_t cvt_length{ length }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::Select)>::value, "return value is not void"); _self.Select(cvt_start, cvt_length); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def("Undo", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::Undo)>::value, "return value is not void"); _self.Undo(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TextBox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBox>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextBoxBeforeTextChangingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("NewText", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>::cself_t _self) { return cvt_out(_self.NewText()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextBoxSelectionChangingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("SelectionLength", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>::cself_t _self) { return cvt_out(_self.SelectionLength()); })
        .def_property_readonly("SelectionStart", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>::cself_t _self) { return cvt_out(_self.SelectionStart()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextBoxTextChangingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextBoxTextChangingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>(_self).repr(); })
        .def_property_readonly("IsContentChanging", [](typename cvt<Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>::cself_t _self) { return cvt_out(_self.IsContentChanging()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextChangedEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextCompositionChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>(_self).repr(); })
        .def_property_readonly("Length", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>::cself_t _self) { return cvt_out(_self.Length()); })
        .def_property_readonly("StartIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>::cself_t _self) { return cvt_out(_self.StartIndex()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextCompositionEndedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>(_self).repr(); })
        .def_property_readonly("Length", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>::cself_t _self) { return cvt_out(_self.Length()); })
        .def_property_readonly("StartIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>::cself_t _self) { return cvt_out(_self.StartIndex()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextCompositionStartedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>(_self).repr(); })
        .def_property_readonly("Length", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>::cself_t _self) { return cvt_out(_self.Length()); })
        .def_property_readonly("StartIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>::cself_t _self) { return cvt_out(_self.StartIndex()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextControlCopyingToClipboardEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>(_self).repr(); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextControlCuttingToClipboardEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>(_self).repr(); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TextControlPasteEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TextControlPasteEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>(_self).repr(); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TimePickedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TimePickedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TimePickedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TimePickedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TimePickedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TimePickedEventArgs>(_self).repr(); })
        .def_property_readonly("NewTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickedEventArgs>::cself_t _self) { return cvt_out(_self.NewTime()); })
        .def_property_readonly("OldTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickedEventArgs>::cself_t _self) { return cvt_out(_self.OldTime()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TimePicker(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TimePicker, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TimePicker>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TimePicker")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TimePicker>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TimePicker>(_self).repr(); })
        .def_property("SelectedTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::cself_t _self) { return cvt_out(_self.SelectedTime()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::self_t _self, typename cvt<decltype(_self.SelectedTime())>::arg_t v) { cvt<decltype(_self.SelectedTime())>::param_t cvt_v{v}; _self.SelectedTime(cvt_v); })
        .def_property("Time", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::cself_t _self) { return cvt_out(_self.Time()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::self_t _self, typename cvt<decltype(_self.Time())>::arg_t v) { cvt<decltype(_self.Time())>::param_t cvt_v{v}; _self.Time(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TimePicker::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TimePicker::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TimePicker>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TimePickerFlyout(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TimePickerFlyout, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TimePickerFlyout>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TimePickerFlyout")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TimePickerFlyout>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerFlyout>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TimePickerFlyout>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TimePickerSelectedValueChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewTime()); })
        .def_property_readonly("OldTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldTime()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TimePickerValueChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewTime()); })
        .def_property_readonly("OldTime", [](typename cvt<Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldTime()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ToggleSplitButton(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ToggleSplitButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ToggleSplitButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ToggleSplitButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ToggleSplitButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>(_self).repr(); })
        .def_property("IsChecked", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::cself_t _self) { return cvt_out(_self.IsChecked()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::self_t _self, typename cvt<decltype(_self.IsChecked())>::arg_t v) { cvt<decltype(_self.IsChecked())>::param_t cvt_v{v}; _self.IsChecked(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToggleSplitButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToggleSplitButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ToggleSplitButtonIsCheckedChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ToggleSwitch(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ToggleSwitch, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ToggleSwitch>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ToggleSwitch")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ToggleSwitch>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>(_self).repr(); })
        .def_property("IsOn", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::cself_t _self) { return cvt_out(_self.IsOn()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::self_t _self, typename cvt<decltype(_self.IsOn())>::arg_t v) { cvt<decltype(_self.IsOn())>::param_t cvt_v{v}; _self.IsOn(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToggleSwitch::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToggleSwitch::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToggleSwitch>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ToolTip(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ToolTip, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ToolTip>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ToolTip")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ToolTip>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ToolTip>(_self).repr(); })
        .def_property("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::cself_t _self) { return cvt_out(_self.IsOpen()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::self_t _self, typename cvt<decltype(_self.IsOpen())>::arg_t v) { cvt<decltype(_self.IsOpen())>::param_t cvt_v{v}; _self.IsOpen(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToolTip::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToolTip::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTip>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_ToolTipService(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::ToolTipService, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ToolTipService>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ToolTipService")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ToolTipService>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTipService>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ToolTipService>(_self).repr(); })
        .def("GetToolTip", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTipService>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t element) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_element{ element }; return cvt_out(_self.GetToolTip(cvt_element)); })
        .def("SetToolTip", [](typename cvt<Microsoft::UI::Xaml::Controls::ToolTipService>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t element, typename cvt<Windows::Foundation::IInspectable>::arg_t value) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_element{ element }; cvt<Windows::Foundation::IInspectable>::param_t cvt_value{ value }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ToolTipService::SetToolTip)>::value, "return value is not void"); _self.SetToolTip(cvt_element, cvt_value); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeView(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeView>(_self).repr(); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property_readonly("SelectedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.SelectedItems()); })
        .def_property("SelectedNode", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.SelectedNode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<decltype(_self.SelectedNode())>::arg_t v) { cvt<decltype(_self.SelectedNode())>::param_t cvt_v{v}; _self.SelectedNode(cvt_v); })
        .def_property_readonly("SelectedNodes", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.SelectedNodes()); })
        .def("Collapse", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::arg_t value) {cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::param_t cvt_value{ value }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeView::Collapse)>::value, "return value is not void"); _self.Collapse(cvt_value); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("ContainerFromNode", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::arg_t node) {cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::param_t cvt_node{ node }; return cvt_out(_self.ContainerFromNode(cvt_node)); })
        .def("Expand", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::arg_t value) {cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::param_t cvt_value{ value }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeView::Expand)>::value, "return value is not void"); _self.Expand(cvt_value); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def("NodeFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.NodeFromContainer(cvt_container)); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeView::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewCollapsedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>(_self).repr(); })
        .def_property_readonly("Item", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>::cself_t _self) { return cvt_out(_self.Item()); })
        .def_property_readonly("Node", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>::cself_t _self) { return cvt_out(_self.Node()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewDragItemsCompletedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewDragItemsStartingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewExpandingEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>(_self).repr(); })
        .def_property_readonly("Item", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>::cself_t _self) { return cvt_out(_self.Item()); })
        .def_property_readonly("Node", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>::cself_t _self) { return cvt_out(_self.Node()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewItem(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>(_self).repr(); })
        .def_property("IsExpanded", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt_out(_self.IsExpanded()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<decltype(_self.IsExpanded())>::arg_t v) { cvt<decltype(_self.IsExpanded())>::param_t cvt_v{v}; _self.IsExpanded(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewItemInvokedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>(_self).repr(); })
        .def_property("Handled", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>::cself_t _self) { return cvt_out(_self.Handled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>::self_t _self, typename cvt<decltype(_self.Handled())>::arg_t v) { cvt<decltype(_self.Handled())>::param_t cvt_v{v}; _self.Handled(cvt_v); })
        .def_property_readonly("InvokedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>::cself_t _self) { return cvt_out(_self.InvokedItem()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewList(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewList, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewList>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewList")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewList>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewList>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewList::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewList::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def("DeselectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewList::DeselectRange)>::value, "return value is not void"); _self.DeselectRange(cvt_itemIndexRange); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewList::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def("SelectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TreeViewList::SelectRange)>::value, "return value is not void"); _self.SelectRange(cvt_itemIndexRange); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewList>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewNode(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewNode, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewNode>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewNode")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewNode>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>(_self).repr(); })
        .def_property_readonly("Depth", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::cself_t _self) { return cvt_out(_self.Depth()); })
        .def_property_readonly("HasChildren", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::cself_t _self) { return cvt_out(_self.HasChildren()); })
        .def_property("IsExpanded", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::cself_t _self) { return cvt_out(_self.IsExpanded()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewNode>::self_t _self, typename cvt<decltype(_self.IsExpanded())>::arg_t v) { cvt<decltype(_self.IsExpanded())>::param_t cvt_v{v}; _self.IsExpanded(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TreeViewSelectionChangedEventArgs(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TreeViewSelectionChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>(_self).repr(); })
        .def_property_readonly("AddedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>::cself_t _self) { return cvt_out(_self.AddedItems()); })
        .def_property_readonly("RemovedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>::cself_t _self) { return cvt_out(_self.RemovedItems()); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_TwoPaneView(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::TwoPaneView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::TwoPaneView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.TwoPaneView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::TwoPaneView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TwoPaneView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::TwoPaneView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::TwoPaneView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_VariableSizedWrapGrid(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid, ::pywinui::holder<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.VariableSizedWrapGrid")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_Viewbox(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::Viewbox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Viewbox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Viewbox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Viewbox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Viewbox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Viewbox>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Viewbox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Viewbox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Viewbox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Viewbox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Viewbox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Viewbox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Viewbox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_VirtualizingPanel(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::VirtualizingPanel, ::pywinui::holder<Microsoft::UI::Xaml::Controls::VirtualizingPanel>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.VirtualizingPanel")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::VirtualizingPanel>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::VirtualizingPanel::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingPanel>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::VirtualizingPanel::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_VirtualizingStackPanel(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::VirtualizingStackPanel, ::pywinui::holder<Microsoft::UI::Xaml::Controls::VirtualizingStackPanel>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.VirtualizingStackPanel")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::VirtualizingStackPanel>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::VirtualizingStackPanel>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::VirtualizingStackPanel>(_self).repr(); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_WebView2(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::WebView2, ::pywinui::holder<Microsoft::UI::Xaml::Controls::WebView2>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.WebView2")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::WebView2>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::WebView2>(_self).repr(); })
        .def_property_readonly("CanGoBack", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::cself_t _self) { return cvt_out(_self.CanGoBack()); })
        .def_property_readonly("CanGoForward", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::cself_t _self) { return cvt_out(_self.CanGoForward()); })
        .def_property("Source", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::cself_t _self) { return cvt_out(_self.Source()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self, typename cvt<decltype(_self.Source())>::arg_t v) { cvt<decltype(_self.Source())>::param_t cvt_v{v}; _self.Source(cvt_v); })
        .def("ExecuteScriptAsync", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self, typename cvt<winrt::hstring>::arg_t javascriptCode) {cvt<winrt::hstring>::param_t cvt_javascriptCode{ javascriptCode }; return cvt_out(_self.ExecuteScriptAsync(cvt_javascriptCode)); })
        .def("GoBack", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WebView2::GoBack)>::value, "return value is not void"); _self.GoBack(); })
        .def("GoForward", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WebView2::GoForward)>::value, "return value is not void"); _self.GoForward(); })
        .def("NavigateToString", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self, typename cvt<winrt::hstring>::arg_t htmlContent) {cvt<winrt::hstring>::param_t cvt_htmlContent{ htmlContent }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WebView2::NavigateToString)>::value, "return value is not void"); _self.NavigateToString(cvt_htmlContent); })
        .def("Reload", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WebView2::Reload)>::value, "return value is not void"); _self.Reload(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WebView2::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::WebView2>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WebView2::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_runtimeclass_Microsoft_UI_Xaml_Controls_WrapGrid(const py::module_ &m) {
    py::class_<Microsoft::UI::Xaml::Controls::WrapGrid, ::pywinui::holder<Microsoft::UI::Xaml::Controls::WrapGrid>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.WrapGrid")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::WrapGrid>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::WrapGrid>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::WrapGrid>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::WrapGrid>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::WrapGrid>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::WrapGrid>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::WrapGrid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WrapGrid::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::WrapGrid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::WrapGrid::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

