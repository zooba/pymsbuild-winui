// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"


void add_Microsoft_UI_Xaml_Controls_HasValidationErrorsChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HasValidationErrorsChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewValue", [](typename cvt<Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewValue()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_Hub(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::Hub, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Hub>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Hub")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Hub>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Hub>(_self).repr(); })
        .def("ScrollToSection", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::arg_t section) {cvt<Microsoft::UI::Xaml::Controls::HubSection>::param_t cvt_section{ section }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Hub::ScrollToSection)>::value, "return value is not void"); _self.ScrollToSection(cvt_section); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Hub::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Hub::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Hub>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_HubSection(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::HubSection, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HubSection>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HubSection")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HubSection>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HubSection>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HubSection::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HubSection::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HubSection>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_HubSectionHeaderClickEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>(_self).repr(); })
        .def_property_readonly("Section", [](typename cvt<Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>::cself_t _self) { return cvt_out(_self.Section()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_HyperlinkButton(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::HyperlinkButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::HyperlinkButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.HyperlinkButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::HyperlinkButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>(_self).repr(); })
        .def_property("NavigateUri", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.NavigateUri()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.NavigateUri())>::arg_t v) { cvt<decltype(_self.NavigateUri())>::param_t cvt_v{v}; _self.NavigateUri(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HyperlinkButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::HyperlinkButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::HyperlinkButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_IconElement(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::IconElement, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IconElement>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IconElement")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IconElement>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IconElement>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconElement::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconElement::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_IconSource(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::IconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IconSource>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_IconSourceElement(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::IconSourceElement, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IconSourceElement>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IconSourceElement")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IconSourceElement>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconSourceElement::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::IconSourceElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::IconSourceElement::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_Image(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::Image, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Image>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Image")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Image>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Image>(_self).repr(); })
        .def("GetAsCastingSource", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self) {return cvt_out(_self.GetAsCastingSource()); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Image::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Image>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Image::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ImageIcon(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ImageIcon, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ImageIcon>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ImageIcon")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ImageIcon>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ImageIcon>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ImageIcon::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ImageIcon::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ImageIconSource(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ImageIconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ImageIconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ImageIconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ImageIconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ImageIconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ImageIconSource>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_InfoBadge(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBadge, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBadge>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBadge")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBadge>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBadge>(_self).repr(); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBadge::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBadge::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBadge>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_InfoBar(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBar>(_self).repr(); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("Message", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Message()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Message())>::arg_t v) { cvt<decltype(_self.Message())>::param_t cvt_v{v}; _self.Message(cvt_v); })
        .def_property("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.IsOpen()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.IsOpen())>::arg_t v) { cvt<decltype(_self.IsOpen())>::param_t cvt_v{v}; _self.IsOpen(cvt_v); })
        .def_property("Severity", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Severity()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Severity())>::arg_t v) { cvt<decltype(_self.Severity())>::param_t cvt_v{v}; _self.Severity(cvt_v); })
        .def_property("Title", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Title()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Title())>::arg_t v) { cvt<decltype(_self.Title())>::param_t cvt_v{v}; _self.Title(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::InfoBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_InfoBarClosedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>(_self).repr(); })
        .def_property_readonly("Reason", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>::cself_t _self) { return cvt_out(_self.Reason()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_InfoBarClosingEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
        .def_property_readonly("Reason", [](typename cvt<Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>::cself_t _self) { return cvt_out(_self.Reason()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_IsTextTrimmedChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemClickEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemClickEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemClickEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemClickEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemClickEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemClickEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemClickEventArgs>(_self).repr(); })
        .def_property_readonly("ClickedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemClickEventArgs>::cself_t _self) { return cvt_out(_self.ClickedItem()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemCollection(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemCollection, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemCollection>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemCollection")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemCollection>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemCollection>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemCollection>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemContainer(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemContainer, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemContainer>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemContainer")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemContainer>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemContainer>(_self).repr(); })
        .def_property("Child", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::cself_t _self) { return cvt_out(_self.Child()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::self_t _self, typename cvt<decltype(_self.Child())>::arg_t v) { cvt<decltype(_self.Child())>::param_t cvt_v{v}; _self.Child(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemContainer::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemContainer::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemContainer>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsControl(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsControl, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsControl>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsControl")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsControl>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsControl>(_self).repr(); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsControl::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsControl::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsControl>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsPickedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsPickedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>(_self).repr(); })
        .def_property_readonly("AddedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>::cself_t _self) { return cvt_out(_self.AddedItems()); })
        .def_property_readonly("RemovedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>::cself_t _self) { return cvt_out(_self.RemovedItems()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsSourceView(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsSourceView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsSourceView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsSourceView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsSourceView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsSourceView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsSourceView>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsStackPanel(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsStackPanel, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsStackPanel>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsStackPanel")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsStackPanel>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsStackPanel::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsStackPanel>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsStackPanel::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsView(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsView>(_self).repr(); })
        .def_property_readonly("CurrentItemIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt_out(_self.CurrentItemIndex()); })
        .def_property_readonly("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt_out(_self.SelectedItem()); })
        .def_property_readonly("SelectedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt_out(_self.SelectedItems()); })
        .def("Deselect", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<int>::arg_t itemIndex) {cvt<int>::param_t cvt_itemIndex{ itemIndex }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::Deselect)>::value, "return value is not void"); _self.Deselect(cvt_itemIndex); })
        .def("DeselectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::DeselectAll)>::value, "return value is not void"); _self.DeselectAll(); })
        .def("InvertSelection", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::InvertSelection)>::value, "return value is not void"); _self.InvertSelection(); })
        .def("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<int>::arg_t itemIndex) {cvt<int>::param_t cvt_itemIndex{ itemIndex }; return cvt_out(_self.IsSelected(cvt_itemIndex)); })
        .def("Select", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<int>::arg_t itemIndex) {cvt<int>::param_t cvt_itemIndex{ itemIndex }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::Select)>::value, "return value is not void"); _self.Select(cvt_itemIndex); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def("StartBringItemIntoView", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<int>::arg_t itemIndex, typename cvt<Microsoft::UI::Xaml::BringIntoViewOptions>::arg_t options) {cvt<int>::param_t cvt_itemIndex{ itemIndex }; cvt<Microsoft::UI::Xaml::BringIntoViewOptions>::param_t cvt_options{ options }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::StartBringItemIntoView)>::value, "return value is not void"); _self.StartBringItemIntoView(cvt_itemIndex, cvt_options); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsViewItemInvokedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsViewItemInvokedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>(_self).repr(); })
        .def_property_readonly("InvokedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>::cself_t _self) { return cvt_out(_self.InvokedItem()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsViewSelectionChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsViewSelectionChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ItemsWrapGrid(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ItemsWrapGrid, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ItemsWrapGrid")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsWrapGrid::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ItemsWrapGrid>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ItemsWrapGrid::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListBox(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListBox>(_self).repr(); })
        .def_property_readonly("SelectedItems", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.SelectedItems()); })
        .def("ScrollIntoView", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListBox::ScrollIntoView)>::value, "return value is not void"); _self.ScrollIntoView(cvt_item); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListBox::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListBox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListBox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBox>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListBoxItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListBoxItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListBoxItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListBoxItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListBoxItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListBoxItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListBoxItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListBoxItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListPickerFlyout(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListPickerFlyout, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListPickerFlyout>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListPickerFlyout")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListPickerFlyout>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListPickerFlyout>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListPickerFlyout>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListView(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListView>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def("DeselectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListView::DeselectRange)>::value, "return value is not void"); _self.DeselectRange(cvt_itemIndexRange); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListView::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def("SelectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListView::SelectRange)>::value, "return value is not void"); _self.SelectRange(cvt_itemIndexRange); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListView>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListViewBase(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListViewBase, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListViewBase>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListViewBase")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListViewBase>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListViewBase>(_self).repr(); })
        .def("DeselectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBase::DeselectRange)>::value, "return value is not void"); _self.DeselectRange(cvt_itemIndexRange); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBase::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def("SelectRange", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::arg_t itemIndexRange) {cvt<Microsoft::UI::Xaml::Data::ItemIndexRange>::param_t cvt_itemIndexRange{ itemIndexRange }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBase::SelectRange)>::value, "return value is not void"); _self.SelectRange(cvt_itemIndexRange); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBase::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBase::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBase>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListViewBaseHeaderItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListViewHeaderItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListViewHeaderItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListViewHeaderItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewHeaderItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewHeaderItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewHeaderItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListViewItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListViewItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListViewItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListViewItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListViewItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListViewItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ListViewItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ListViewPersistenceHelper(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ListViewPersistenceHelper")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MediaPlayerElement(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MediaPlayerElement, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MediaPlayerElement>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MediaPlayerElement")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MediaPlayerElement>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>(_self).repr(); })
        .def_property("IsFullWindow", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::cself_t _self) { return cvt_out(_self.IsFullWindow()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::self_t _self, typename cvt<decltype(_self.IsFullWindow())>::arg_t v) { cvt<decltype(_self.IsFullWindow())>::param_t cvt_v{v}; _self.IsFullWindow(cvt_v); })
        .def_property_readonly("MediaPlayer", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::cself_t _self) { return cvt_out(_self.MediaPlayer()); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MediaPlayerElement::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MediaPlayerElement::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerElement>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MediaPlayerPresenter(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MediaPlayerPresenter")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>(_self).repr(); })
        .def_property("IsFullWindow", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>::cself_t _self) { return cvt_out(_self.IsFullWindow()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>::self_t _self, typename cvt<decltype(_self.IsFullWindow())>::arg_t v) { cvt<decltype(_self.IsFullWindow())>::param_t cvt_v{v}; _self.IsFullWindow(cvt_v); })
        .def_property_readonly("MediaPlayer", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>::cself_t _self) { return cvt_out(_self.MediaPlayer()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MediaTransportControls(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MediaTransportControls, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MediaTransportControls>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MediaTransportControls")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MediaTransportControls>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>(_self).repr(); })
        .def("Hide", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MediaTransportControls::Hide)>::value, "return value is not void"); _self.Hide(); })
        .def("Show", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MediaTransportControls::Show)>::value, "return value is not void"); _self.Show(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MediaTransportControls::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MediaTransportControls::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControls>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MediaTransportControlsHelper(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MediaTransportControlsHelper")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MenuBar(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MenuBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MenuBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MenuBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MenuBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MenuBar>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MenuBarItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MenuBarItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MenuBarItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MenuBarItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MenuBarItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>(_self).repr(); })
        .def_property("Title", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::cself_t _self) { return cvt_out(_self.Title()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::self_t _self, typename cvt<decltype(_self.Title())>::arg_t v) { cvt<decltype(_self.Title())>::param_t cvt_v{v}; _self.Title(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuBarItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuBarItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuBarItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MenuFlyout(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MenuFlyout, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MenuFlyout>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MenuFlyout")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MenuFlyout>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>(_self).repr(); })
        .def("ShowAt", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t placementTarget, typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::arg_t showOptions) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_placementTarget{ placementTarget }; cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::param_t cvt_showOptions{ showOptions }; _self.ShowAt(cvt_placementTarget, cvt_showOptions); })
        .def_property("ElementSoundMode", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::cself_t _self) { return cvt_out(_self.ElementSoundMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::self_t _self, typename cvt<decltype(_self.ElementSoundMode())>::arg_t v) { cvt<decltype(_self.ElementSoundMode())>::param_t cvt_v{v}; _self.ElementSoundMode(cvt_v); })
        .def_property_readonly("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::cself_t _self) { return cvt_out(_self.IsOpen()); })
        .def_property("ShowMode", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::cself_t _self) { return cvt_out(_self.ShowMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::self_t _self, typename cvt<decltype(_self.ShowMode())>::arg_t v) { cvt<decltype(_self.ShowMode())>::param_t cvt_v{v}; _self.ShowMode(cvt_v); })
        .def("Hide", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyout>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyout::Hide)>::value, "return value is not void"); _self.Hide(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MenuFlyoutItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MenuFlyoutItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MenuFlyoutItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>(_self).repr(); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyoutItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyoutItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MenuFlyoutItemBase(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_MenuFlyoutSubItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>(_self).repr(); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationView(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationView>(_self).repr(); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def("Collapse", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::arg_t item) {cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::param_t cvt_item{ item }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationView::Collapse)>::value, "return value is not void"); _self.Collapse(cvt_item); })
        .def("Expand", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::arg_t item) {cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::param_t cvt_item{ item }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationView::Expand)>::value, "return value is not void"); _self.Expand(cvt_item); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationView>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewBackRequestedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewDisplayModeChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>(_self).repr(); })
        .def_property_readonly("DisplayMode", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>::cself_t _self) { return cvt_out(_self.DisplayMode()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>(_self).repr(); })
        .def_property("IsExpanded", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::cself_t _self) { return cvt_out(_self.IsExpanded()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::self_t _self, typename cvt<decltype(_self.IsExpanded())>::arg_t v) { cvt<decltype(_self.IsExpanded())>::param_t cvt_v{v}; _self.IsExpanded(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationViewItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationViewItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewItemBase(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewItemBase, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewItemBase")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationViewItemBase::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NavigationViewItemBase::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewItemCollapsedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>(_self).repr(); })
        .def_property_readonly("CollapsedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>::cself_t _self) { return cvt_out(_self.CollapsedItem()); })
        .def_property_readonly("CollapsedItemContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>::cself_t _self) { return cvt_out(_self.CollapsedItemContainer()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewItemExpandingEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>(_self).repr(); })
        .def_property_readonly("ExpandingItem", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>::cself_t _self) { return cvt_out(_self.ExpandingItem()); })
        .def_property_readonly("ExpandingItemContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>::cself_t _self) { return cvt_out(_self.ExpandingItemContainer()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewItemHeader(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewItemHeader")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewItemInvokedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>(_self).repr(); })
        .def_property_readonly("InvokedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>::cself_t _self) { return cvt_out(_self.InvokedItem()); })
        .def_property_readonly("InvokedItemContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>::cself_t _self) { return cvt_out(_self.InvokedItemContainer()); })
        .def_property_readonly("IsSettingsInvoked", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>::cself_t _self) { return cvt_out(_self.IsSettingsInvoked()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewPaneClosingEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NavigationViewSelectionChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>(_self).repr(); })
        .def_property_readonly("IsSettingsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>::cself_t _self) { return cvt_out(_self.IsSettingsSelected()); })
        .def_property_readonly("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>::cself_t _self) { return cvt_out(_self.SelectedItem()); })
        .def_property_readonly("SelectedItemContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>::cself_t _self) { return cvt_out(_self.SelectedItemContainer()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NumberBox(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NumberBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NumberBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NumberBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NumberBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NumberBox>(_self).repr(); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NumberBox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::NumberBox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBox>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_NumberBoxValueChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.NumberBoxValueChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>(_self).repr(); })
        .def_property_readonly("OldValue", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldValue()); })
        .def_property_readonly("NewValue", [](typename cvt<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewValue()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_Page(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::Page, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Page>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Page")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Page>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Page>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Page::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Page::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Page>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_Panel(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::Panel, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Panel>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Panel")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Panel>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Panel>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Panel>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Panel>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Panel>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Panel>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Panel>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Panel::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Panel>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Panel::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ParallaxView(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ParallaxView, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ParallaxView>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ParallaxView")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ParallaxView>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ParallaxView>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ParallaxView>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ParallaxView>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ParallaxView>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ParallaxView>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ParallaxView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ParallaxView::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ParallaxView>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ParallaxView::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PasswordBox(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PasswordBox, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PasswordBox>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PasswordBox")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PasswordBox>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PasswordBox>(_self).repr(); })
        .def_property("Password", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::cself_t _self) { return cvt_out(_self.Password()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self, typename cvt<decltype(_self.Password())>::arg_t v) { cvt<decltype(_self.Password())>::param_t cvt_v{v}; _self.Password(cvt_v); })
        .def("PasteFromClipboard", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PasswordBox::PasteFromClipboard)>::value, "return value is not void"); _self.PasteFromClipboard(); })
        .def("SelectAll", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PasswordBox::SelectAll)>::value, "return value is not void"); _self.SelectAll(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PasswordBox::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PasswordBox::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBox>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PasswordBoxPasswordChangingEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>(_self).repr(); })
        .def_property_readonly("IsContentChanging", [](typename cvt<Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>::cself_t _self) { return cvt_out(_self.IsContentChanging()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PathIcon(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PathIcon, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PathIcon>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PathIcon")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PathIcon>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PathIcon>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PathIcon>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::PathIcon>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::PathIcon>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PathIcon>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PathIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PathIcon::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PathIcon>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PathIcon::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PathIconSource(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PathIconSource, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PathIconSource>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PathIconSource")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PathIconSource>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PathIconSource>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PathIconSource>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PersonPicture(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PersonPicture, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PersonPicture>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PersonPicture")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PersonPicture>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PersonPicture>(_self).repr(); })
        .def_property("BadgeText", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::cself_t _self) { return cvt_out(_self.BadgeText()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::self_t _self, typename cvt<decltype(_self.BadgeText())>::arg_t v) { cvt<decltype(_self.BadgeText())>::param_t cvt_v{v}; _self.BadgeText(cvt_v); })
        .def_property("Initials", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::cself_t _self) { return cvt_out(_self.Initials()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::self_t _self, typename cvt<decltype(_self.Initials())>::arg_t v) { cvt<decltype(_self.Initials())>::param_t cvt_v{v}; _self.Initials(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PersonPicture::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PersonPicture::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PersonPicture>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PickerConfirmedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PickerConfirmedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PipsPager(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PipsPager, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PipsPager>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PipsPager")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PipsPager>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PipsPager>(_self).repr(); })
        .def_property("SelectedPageIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::cself_t _self) { return cvt_out(_self.SelectedPageIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::self_t _self, typename cvt<decltype(_self.SelectedPageIndex())>::arg_t v) { cvt<decltype(_self.SelectedPageIndex())>::param_t cvt_v{v}; _self.SelectedPageIndex(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PipsPager::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PipsPager::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPager>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PipsPagerSelectedIndexChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PipsPagerSelectedIndexChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_Pivot(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::Pivot, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Pivot>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Pivot")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Pivot>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Pivot>(_self).repr(); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Pivot::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Pivot::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::Pivot>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PivotItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PivotItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PivotItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PivotItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PivotItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PivotItem>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PivotItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::PivotItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_PivotItemEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::PivotItemEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::PivotItemEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.PivotItemEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::PivotItemEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItemEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::PivotItemEventArgs>(_self).repr(); })
        .def_property("Item", [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItemEventArgs>::cself_t _self) { return cvt_out(_self.Item()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::PivotItemEventArgs>::self_t _self, typename cvt<decltype(_self.Item())>::arg_t v) { cvt<decltype(_self.Item())>::param_t cvt_v{v}; _self.Item(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ProgressBar(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ProgressBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ProgressBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ProgressBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ProgressBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ProgressBar>(_self).repr(); })
        .def_property("IsIndeterminate", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.IsIndeterminate()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.IsIndeterminate())>::arg_t v) { cvt<decltype(_self.IsIndeterminate())>::param_t cvt_v{v}; _self.IsIndeterminate(cvt_v); })
        .def_property("ShowError", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.ShowError()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.ShowError())>::arg_t v) { cvt<decltype(_self.ShowError())>::param_t cvt_v{v}; _self.ShowError(cvt_v); })
        .def_property("ShowPaused", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.ShowPaused()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.ShowPaused())>::arg_t v) { cvt<decltype(_self.ShowPaused())>::param_t cvt_v{v}; _self.ShowPaused(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ProgressBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ProgressBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("LargeChange", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.LargeChange()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.LargeChange())>::arg_t v) { cvt<decltype(_self.LargeChange())>::param_t cvt_v{v}; _self.LargeChange(cvt_v); })
        .def_property("Minimum", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.Minimum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.Minimum())>::arg_t v) { cvt<decltype(_self.Minimum())>::param_t cvt_v{v}; _self.Minimum(cvt_v); })
        .def_property("Maximum", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.Maximum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.Maximum())>::arg_t v) { cvt<decltype(_self.Maximum())>::param_t cvt_v{v}; _self.Maximum(cvt_v); })
        .def_property("SmallChange", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.SmallChange()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.SmallChange())>::arg_t v) { cvt<decltype(_self.SmallChange())>::param_t cvt_v{v}; _self.SmallChange(cvt_v); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressBar>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_ProgressRing(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::ProgressRing, ::pywinui::holder<Microsoft::UI::Xaml::Controls::ProgressRing>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.ProgressRing")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::ProgressRing>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::ProgressRing>(_self).repr(); })
        .def_property("IsActive", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.IsActive()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.IsActive())>::arg_t v) { cvt<decltype(_self.IsActive())>::param_t cvt_v{v}; _self.IsActive(cvt_v); })
        .def_property("IsIndeterminate", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.IsIndeterminate()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.IsIndeterminate())>::arg_t v) { cvt<decltype(_self.IsIndeterminate())>::param_t cvt_v{v}; _self.IsIndeterminate(cvt_v); })
        .def_property("Maximum", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.Maximum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.Maximum())>::arg_t v) { cvt<decltype(_self.Maximum())>::param_t cvt_v{v}; _self.Maximum(cvt_v); })
        .def_property("Minimum", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.Minimum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.Minimum())>::arg_t v) { cvt<decltype(_self.Minimum())>::param_t cvt_v{v}; _self.Minimum(cvt_v); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ProgressRing::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::ProgressRing::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::ProgressRing>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RadioButton(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RadioButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RadioButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RadioButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RadioButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RadioButton>(_self).repr(); })
        .def_property("GroupName", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.GroupName()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<decltype(_self.GroupName())>::arg_t v) { cvt<decltype(_self.GroupName())>::param_t cvt_v{v}; _self.GroupName(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RadioButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RadioButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
        .def_property("IsChecked", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.IsChecked()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<decltype(_self.IsChecked())>::arg_t v) { cvt<decltype(_self.IsChecked())>::param_t cvt_v{v}; _self.IsChecked(cvt_v); })
        .def_property("IsThreeState", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::cself_t _self) { return cvt_out(_self.IsThreeState()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButton>::self_t _self, typename cvt<decltype(_self.IsThreeState())>::arg_t v) { cvt<decltype(_self.IsThreeState())>::param_t cvt_v{v}; _self.IsThreeState(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RadioButtons(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RadioButtons, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RadioButtons>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RadioButtons")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RadioButtons>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RadioButtons>(_self).repr(); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RadioButtons::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RadioButtons::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioButtons>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RadioMenuFlyoutItem(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>(_self).repr(); })
        .def_property("IsChecked", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::cself_t _self) { return cvt_out(_self.IsChecked()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.IsChecked())>::arg_t v) { cvt<decltype(_self.IsChecked())>::param_t cvt_v{v}; _self.IsChecked(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("Text", [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::cself_t _self) { return cvt_out(_self.Text()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>::self_t _self, typename cvt<decltype(_self.Text())>::arg_t v) { cvt<decltype(_self.Text())>::param_t cvt_v{v}; _self.Text(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RatingControl(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RatingControl, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RatingControl>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RatingControl")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RatingControl>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RatingControl>(_self).repr(); })
        .def_property("MaxRating", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::cself_t _self) { return cvt_out(_self.MaxRating()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::self_t _self, typename cvt<decltype(_self.MaxRating())>::arg_t v) { cvt<decltype(_self.MaxRating())>::param_t cvt_v{v}; _self.MaxRating(cvt_v); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RatingControl::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RatingControl::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RatingControl>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RefreshContainer(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RefreshContainer, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RefreshContainer>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RefreshContainer")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RefreshContainer>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RefreshContainer::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::RefreshContainer::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshContainer>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RefreshInteractionRatioChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>(_self).repr(); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RefreshRequestedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>(_self).repr(); })
        .def("GetDeferral", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>::self_t _self) {return cvt_out(_self.GetDeferral()); })
    ;
}

void add_Microsoft_UI_Xaml_Controls_RefreshStateChangedEventArgs(py::module_ m) {
    py::class_<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>(_self).repr(); })
        .def_property_readonly("NewState", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>::cself_t _self) { return cvt_out(_self.NewState()); })
        .def_property_readonly("OldState", [](typename cvt<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>::cself_t _self) { return cvt_out(_self.OldState()); })
    ;
}