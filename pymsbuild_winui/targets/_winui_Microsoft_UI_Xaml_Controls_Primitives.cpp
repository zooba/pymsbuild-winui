// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"

PYBIND11_EMBEDDED_MODULE(_winui_Microsoft_UI_Xaml_Controls_Primitives, m) {
    py::enum_<Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode>(m, "Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode")
        .value("Auto", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::Auto)
        .value("Bottom", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::Bottom)
        .value("BottomEdgeAlignedLeft", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::BottomEdgeAlignedLeft)
        .value("BottomEdgeAlignedRight", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::BottomEdgeAlignedRight)
        .value("Full", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::Full)
        .value("Left", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::Left)
        .value("LeftEdgeAlignedBottom", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::LeftEdgeAlignedBottom)
        .value("LeftEdgeAlignedTop", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::LeftEdgeAlignedTop)
        .value("Right", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::Right)
        .value("RightEdgeAlignedBottom", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::RightEdgeAlignedBottom)
        .value("RightEdgeAlignedTop", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::RightEdgeAlignedTop)
        .value("Top", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::Top)
        .value("TopEdgeAlignedLeft", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::TopEdgeAlignedLeft)
        .value("TopEdgeAlignedRight", Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode::TopEdgeAlignedRight)
    ;
    py::enum_<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode>(m, "Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode")
        .value("Auto", Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode::Auto)
        .value("Standard", Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode::Standard)
        .value("Transient", Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode::Transient)
        .value("TransientWithDismissOnPointerMoveAway", Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode::TransientWithDismissOnPointerMoveAway)
    ;
    py::enum_<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType>(m, "Microsoft.UI.Xaml.Controls.Primitives.ScrollEventType")
        .value("EndScroll", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::EndScroll)
        .value("First", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::First)
        .value("LargeDecrement", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::LargeDecrement)
        .value("LargeIncrement", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::LargeIncrement)
        .value("Last", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::Last)
        .value("SmallDecrement", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::SmallDecrement)
        .value("SmallIncrement", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::SmallIncrement)
        .value("ThumbPosition", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::ThumbPosition)
        .value("ThumbTrack", Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType::ThumbTrack)
    ;

    py::class_<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>(_self).repr(); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt_out(_self.IsPressed()); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::ButtonBase::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::ButtonBase::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>(_self).repr(); })
        .def_property_readonly("Canceled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>::cself_t _self) { return cvt_out(_self.Canceled()); })
        .def_property_readonly("HorizontalChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>::cself_t _self) { return cvt_out(_self.HorizontalChange()); })
        .def_property_readonly("VerticalChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>::cself_t _self) { return cvt_out(_self.VerticalChange()); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>(_self).repr(); })
        .def_property_readonly("HorizontalChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>::cself_t _self) { return cvt_out(_self.HorizontalChange()); })
        .def_property_readonly("VerticalChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>::cself_t _self) { return cvt_out(_self.VerticalChange()); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>(_self).repr(); })
        .def_property_readonly("HorizontalOffset", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>::cself_t _self) { return cvt_out(_self.HorizontalOffset()); })
        .def_property_readonly("VerticalOffset", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>::cself_t _self) { return cvt_out(_self.VerticalOffset()); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>(_self).repr(); })
        .def_property("ElementSoundMode", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::cself_t _self) { return cvt_out(_self.ElementSoundMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::self_t _self, typename cvt<decltype(_self.ElementSoundMode())>::arg_t v) { cvt<decltype(_self.ElementSoundMode())>::param_t cvt_v{v}; _self.ElementSoundMode(cvt_v); })
        .def_property_readonly("IsOpen", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::cself_t _self) { return cvt_out(_self.IsOpen()); })
        .def_property("ShowMode", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::cself_t _self) { return cvt_out(_self.ShowMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::self_t _self, typename cvt<decltype(_self.ShowMode())>::arg_t v) { cvt<decltype(_self.ShowMode())>::param_t cvt_v{v}; _self.ShowMode(cvt_v); })
        .def("Hide", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase::Hide)>::value, "return value is not void"); _self.Hide(); })
        .def("ShowAt", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t placementTarget, typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::arg_t showOptions) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_placementTarget{ placementTarget }; cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::param_t cvt_showOptions{ showOptions }; _self.ShowAt(cvt_placementTarget, cvt_showOptions); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>(_self).repr(); })
        .def_property("Cancel", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>::cself_t _self) { return cvt_out(_self.Cancel()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>::self_t _self, typename cvt<decltype(_self.Cancel())>::arg_t v) { cvt<decltype(_self.Cancel())>::param_t cvt_v{v}; _self.Cancel(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>(_self).repr(); })
        .def(py::init([]() { Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions inst{  }; return cvt_out(inst); }))
        .def_property("Placement", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::cself_t _self) { return cvt_out(_self.Placement()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::self_t _self, typename cvt<decltype(_self.Placement())>::arg_t v) { cvt<decltype(_self.Placement())>::param_t cvt_v{v}; _self.Placement(cvt_v); })
        .def_property("Position", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::cself_t _self) { return cvt_out(_self.Position()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::self_t _self, typename cvt<decltype(_self.Position())>::arg_t v) { cvt<decltype(_self.Position())>::param_t cvt_v{v}; _self.Position(cvt_v); })
        .def_property("ShowMode", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::cself_t _self) { return cvt_out(_self.ShowMode()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>::self_t _self, typename cvt<decltype(_self.ShowMode())>::arg_t v) { cvt<decltype(_self.ShowMode())>::param_t cvt_v{v}; _self.ShowMode(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>(_self).repr(); })
        .def_property("ItemHeight", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.ItemHeight()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.ItemHeight())>::arg_t v) { cvt<decltype(_self.ItemHeight())>::param_t cvt_v{v}; _self.ItemHeight(cvt_v); })
        .def_property("ItemWidth", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.ItemWidth()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.ItemWidth())>::arg_t v) { cvt<decltype(_self.ItemWidth())>::param_t cvt_v{v}; _self.ItemWidth(cvt_v); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("ShouldLoop", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.ShouldLoop()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.ShouldLoop())>::arg_t v) { cvt<decltype(_self.ShouldLoop())>::param_t cvt_v{v}; _self.ShouldLoop(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::RangeBase, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.RangeBase")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>(_self).repr(); })
        .def_property("LargeChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.LargeChange()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.LargeChange())>::arg_t v) { cvt<decltype(_self.LargeChange())>::param_t cvt_v{v}; _self.LargeChange(cvt_v); })
        .def_property("Minimum", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.Minimum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.Minimum())>::arg_t v) { cvt<decltype(_self.Minimum())>::param_t cvt_v{v}; _self.Minimum(cvt_v); })
        .def_property("Maximum", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.Maximum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.Maximum())>::arg_t v) { cvt<decltype(_self.Maximum())>::param_t cvt_v{v}; _self.Maximum(cvt_v); })
        .def_property("SmallChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.SmallChange()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.SmallChange())>::arg_t v) { cvt<decltype(_self.SmallChange())>::param_t cvt_v{v}; _self.SmallChange(cvt_v); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::RangeBase::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::RangeBase::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::RangeBase>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.ScrollBar")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>(_self).repr(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::ScrollBar::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::ScrollBar::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property("LargeChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.LargeChange()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.LargeChange())>::arg_t v) { cvt<decltype(_self.LargeChange())>::param_t cvt_v{v}; _self.LargeChange(cvt_v); })
        .def_property("Minimum", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.Minimum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.Minimum())>::arg_t v) { cvt<decltype(_self.Minimum())>::param_t cvt_v{v}; _self.Minimum(cvt_v); })
        .def_property("Maximum", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.Maximum()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.Maximum())>::arg_t v) { cvt<decltype(_self.Maximum())>::param_t cvt_v{v}; _self.Maximum(cvt_v); })
        .def_property("SmallChange", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.SmallChange()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.SmallChange())>::arg_t v) { cvt<decltype(_self.SmallChange())>::param_t cvt_v{v}; _self.SmallChange(cvt_v); })
        .def_property("Value", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::cself_t _self) { return cvt_out(_self.Value()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>::self_t _self, typename cvt<decltype(_self.Value())>::arg_t v) { cvt<decltype(_self.Value())>::param_t cvt_v{v}; _self.Value(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>(_self).repr(); })
        .def_property_readonly("NewValue", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>::cself_t _self) { return cvt_out(_self.NewValue()); })
        .def_property_readonly("ScrollEventType", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>::cself_t _self) { return cvt_out(_self.ScrollEventType()); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::Selector, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::Selector>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.Selector")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::Selector>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>(_self).repr(); })
        .def_property("SelectedIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt_out(_self.SelectedIndex()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<decltype(_self.SelectedIndex())>::arg_t v) { cvt<decltype(_self.SelectedIndex())>::param_t cvt_v{v}; _self.SelectedIndex(cvt_v); })
        .def_property("SelectedItem", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt_out(_self.SelectedItem()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<decltype(_self.SelectedItem())>::arg_t v) { cvt<decltype(_self.SelectedItem())>::param_t cvt_v{v}; _self.SelectedItem(cvt_v); })
        .def_property("SelectedValue", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt_out(_self.SelectedValue()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<decltype(_self.SelectedValue())>::arg_t v) { cvt<decltype(_self.SelectedValue())>::param_t cvt_v{v}; _self.SelectedValue(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::Selector::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::Selector::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def("ContainerFromIndex", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<int>::arg_t index) {cvt<int>::param_t cvt_index{ index }; return cvt_out(_self.ContainerFromIndex(cvt_index)); })
        .def("ContainerFromItem", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<Windows::Foundation::IInspectable>::arg_t item) {cvt<Windows::Foundation::IInspectable>::param_t cvt_item{ item }; return cvt_out(_self.ContainerFromItem(cvt_item)); })
        .def("IndexFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.IndexFromContainer(cvt_container)); })
        .def("ItemFromContainer", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Selector>::self_t _self, typename cvt<Microsoft::UI::Xaml::DependencyObject>::arg_t container) {cvt<Microsoft::UI::Xaml::DependencyObject>::param_t cvt_container{ container }; return cvt_out(_self.ItemFromContainer(cvt_container)); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.SelectorItem")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>(_self).repr(); })
        .def_property("IsSelected", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::cself_t _self) { return cvt_out(_self.IsSelected()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::self_t _self, typename cvt<decltype(_self.IsSelected())>::arg_t v) { cvt<decltype(_self.IsSelected())>::param_t cvt_v{v}; _self.IsSelected(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::SelectorItem::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::SelectorItem::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::Thumb, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::Thumb>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.Thumb")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::Thumb>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>(_self).repr(); })
        .def_property_readonly("IsDragging", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::cself_t _self) { return cvt_out(_self.IsDragging()); })
        .def("CancelDrag", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::self_t _self) {static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::Thumb::CancelDrag)>::value, "return value is not void"); _self.CancelDrag(); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::Thumb::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::Thumb::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::Thumb>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
    ;
    py::class_<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton, ::pywinui::holder<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>, Windows::Foundation::IInspectable>(m, "Microsoft.UI.Xaml.Controls.Primitives.ToggleButton")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>()); }))
        .def("__repr__", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>(_self).repr(); })
        .def_property("IsChecked", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.IsChecked()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<decltype(_self.IsChecked())>::arg_t v) { cvt<decltype(_self.IsChecked())>::param_t cvt_v{v}; _self.IsChecked(cvt_v); })
        .def_property("IsThreeState", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.IsThreeState()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<decltype(_self.IsThreeState())>::arg_t v) { cvt<decltype(_self.IsThreeState())>::param_t cvt_v{v}; _self.IsThreeState(cvt_v); })
        .def_property_readonly("DataContext", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.DataContext()); })
        .def_property("Visibility", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.Visibility()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<decltype(_self.Visibility())>::arg_t v) { cvt<decltype(_self.Visibility())>::param_t cvt_v{v}; _self.Visibility(cvt_v); })
        .def("StartAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::ToggleButton::StartAnimation)>::value, "return value is not void"); _self.StartAnimation(cvt_animation); })
        .def("StopAnimation", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<Microsoft::UI::Composition::CompositionAnimation>::arg_t animation) {cvt<Microsoft::UI::Composition::CompositionAnimation>::param_t cvt_animation{ animation }; static_assert(ensure_void<decltype(&Microsoft::UI::Xaml::Controls::Primitives::ToggleButton::StopAnimation)>::value, "return value is not void"); _self.StopAnimation(cvt_animation); })
        .def_property("Content", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.Content()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<decltype(_self.Content())>::arg_t v) { cvt<decltype(_self.Content())>::param_t cvt_v{v}; _self.Content(cvt_v); })
        .def_property("IsEnabled", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.IsEnabled()); }, [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::self_t _self, typename cvt<decltype(_self.IsEnabled())>::arg_t v) { cvt<decltype(_self.IsEnabled())>::param_t cvt_v{v}; _self.IsEnabled(cvt_v); })
        .def_property_readonly("IsPointerOver", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.IsPointerOver()); })
        .def_property_readonly("IsPressed", [](typename cvt<Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>::cself_t _self) { return cvt_out(_self.IsPressed()); })
    ;
}
