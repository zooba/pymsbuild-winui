{% include "regen-header.tmpl" %}
#include "pch.h"
#include "{{page.basename}}.h"
#include "{{page.name}}.g.cpp"

using namespace winrt;
using namespace Microsoft::UI::Xaml;
namespace py = pybind11;
using Cls = winrt::{{namespace}}::implementation::{{page.name}};

PYBIND11_EMBEDDED_MODULE(_{{namespace}}_{{page.name}}, m) {
    py::class_<Cls>(m, "{{page.name}}_View")
{% for p in page.properties %}
{% if p.hold %}
        .def_property("{{p.name}}", [](const Cls &c) { return hold(c.{{p.name}}()); }, [](Cls &c, holder<{{p.type}}> v) { c.{{p.name}}(v.v); })
{% else %}
        .def_property("{{p.name}}", [](const Cls &c) { return c.{{p.name}}(); }, [](Cls &c, {{p.type}} v) { c.{{p.name}}(v); })
{% endif %}
{% endfor %}
{% for c in page.controls %}
        .def_property_readonly("{{c.name}}", [](Cls &c) { return hold(c.{{c.name}}()); })
{% endfor %}
    ;
};

namespace winrt::{{namespace}}::implementation
{
    {{page.name}}::{{page.name}}()
    {
        ::pybind11::module_::import("_{{namespace}}_{{page.name}}");
        auto module_ = ::pybind11::module_::import("{{namespace}}");
        auto cls = module_.attr("{{page.name}}");
        __pyobj = cls(this);
        Closed([this](IInspectable const&, WindowEventArgs const&) { __pyobj.release(); });
        InitializeComponent();
    }

    winrt::event_token {{page.name}}::PropertyChanged(Data::PropertyChangedEventHandler const& handler)
    {
        return __propertyChanged.add(handler);
    }

    void {{page.name}}::PropertyChanged(winrt::event_token const& token)
    {
        __propertyChanged.remove(token);
    }

{% if page.properties +%}
    // Bindable property getter/setters
{% for p in page.properties %}

    {{p.type}} {{page.name}}::{{p.name}}() const
    {
        return _{{p.name}};
    }

    void {{page.name}}::{{p.name}}({{p.type}} value)
    {
        if (_{{p.name}} != value) {
            _{{p.name}} = value;
            if (__propertyChanged) {
                __propertyChanged(*this, Data::PropertyChangedEventArgs{ L"{{p.name}}" });
            }
        }
    }
{% endfor %}
{% endif %}
{% if page.handlers +%}
    // Event handlers
{% for h in page.handlers %}

    void {{page.name}}::{{h.name}}(IInspectable const&, {{h.eventarg}} const&)
    {
        __pyobj.attr("{{h.name}}")();
    }
{% endfor %}
{% endif %}
}
