{% include "regen-header.tmpl" %}
#pragma once
#include <{{page.name}}.g.h>

{% for vm in page.viewmodels %}
#include <{{vm.name}}.g.h>
{% endfor %}

namespace winrt::{{namespace}}::implementation
{
    using namespace Windows::UI;
    using namespace Microsoft::UI::Xaml;
    using namespace Microsoft::UI::Xaml::Controls;
    using namespace Microsoft::UI::Xaml::Data;

{% for m in page.viewmodels %}
    struct {{m.name}} : {{m.name}}T<{{m.name}}>
    {
        {{m.name}}();
{% for prop in m.properties %}
        {{prop.type}} {{prop.name}}() const;
        void {{prop.name}}(const {{prop.type}} &value);
        static DependencyProperty {{prop.name}}Property() { return _{{prop.name}}Property; }
{% endfor %}

    private:
{% for prop in m.properties %}
        static DependencyProperty _{{prop.name}}Property;
        static void _on{{prop.name}}Changed(const DependencyObject &, const DependencyPropertyChangedEventArgs &);
{% endfor %}
    };

{% endfor %}

    struct {{page.name}} : {{page.name}}T<{{page.name}}>
    {
        {{page.name}}();

{% for prop in page.properties %}
        {{prop.type}} {{prop.name}}() const;
        void {{prop.name}}({{prop.type}} value);
{% endfor %}

{% for h in page.handlers %}
        void {{h.name}}({{h.sender}}, {{h.eventarg}});
{% endfor %}

        pybind11::object _get_viewmodels() { return __viewmodels; }
        pybind11::object wrap(const pybind11::handle &o);
        pybind11::object as_viewmodel(const ::winrt::Windows::Foundation::IInspectable &o);
        pybind11::object unwrap(const pybind11::object &o);

        winrt::event_token PropertyChanged(PropertyChangedEventHandler const& value);
        void PropertyChanged(winrt::event_token const& token);
    private:
        winrt::event<PropertyChangedEventHandler> __propertyChanged;
        pybind11::object __pyobj;
        pybind11::object __viewmodels;
        pybind11::object __wrapped;

{% for prop in page.properties %}
        {{prop.type}} _{{prop.name}};
{% endfor %}
    };
}

namespace winrt::{{namespace}}::factory_implementation
{
{% for m in page.viewmodels %}
    struct {{m.name}} : {{m.name}}T<{{m.name}}, implementation::{{m.name}}> { };
{% endfor %}
    struct {{page.name}} : {{page.name}}T<{{page.name}}, implementation::{{page.name}}> { };
}
