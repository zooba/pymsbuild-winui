// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"

using namespace winrt;
using namespace Windows::Foundation;
using namespace Windows::Media::Playback;
using namespace Windows::UI;
using namespace Microsoft::UI::Xaml;
using namespace Microsoft::UI::Xaml::Controls;
using namespace Microsoft::UI::Xaml::Input;
using namespace Microsoft::UI::Xaml::Navigation;
namespace py = pybind11;

template <typename T> struct arg_type { typedef const T &type; };
template <> struct arg_type<winrt::hstring> { typedef const std::wstring &type; };

template <typename T> static std::wstring default_repr(const T&) {
    std::wstringstream s;
    s << "<" << typeid(T).name() << ">";
    return s.str();
}
template <> static std::wstring default_repr(const IInspectable& _self) { return L"<" + std::wstring{winrt::get_class_name(_self)} + L">"; }

template <typename T>
static void default_on_complete(const IAsyncOperation<T> &op, AsyncStatus, py::object on_complete) {
    py::gil_scoped_acquire _gil;
    try {
        on_complete(::pywinui::call_and_hold([&op]() { return op.GetResults(); }));
    } catch (py::error_already_set &eas) {
        eas.discard_as_unraisable(__func__);
    } catch (const std::exception &) {
        DebugBreak();
    }
}

PYBIND11_EMBEDDED_MODULE(_winui_Xaml_Controls, m) {
    py::class_<IInspectable, ::pywinui::holder<IInspectable>>(m, "Windows.Foundation.IInspectable")
        .def("__repr__", [](const IInspectable& _self) { return default_repr(_self); } )
        .def("as_", [](const IInspectable& _self, const char *type) { return py::module_::import("_winui_Xaml_Controls").attr(type)(_self); })
    ;

{% for c in all_controls %}
{% if c.kind == "enum" %}
    py::enum_<{{c.cppname}}>(m, "{{c.fullname}}")
{% for name in c.members %}
        .value("{{name}}", {{c.cppname}}::{{name}})
{% endfor %}
    ;
{% endif %}
{% endfor %}

{% for c in all_controls %}
{% if c.kind == "asyncop" %}
    py::class_<IAsyncOperation<{{c.cppname}}>, ::pywinui::holder<IAsyncOperation<{{c.cppname}}>>>(m, "Windows.Foundation.IAsyncOperation<{{c.fullname}}")
        .def("GetResults", [](const IAsyncOperation<{{c.cppname}}> &_self) { return ::pywinui::hold(_self.GetResults()); })
        .def("Completed", [](IAsyncOperation<{{c.cppname}}> &_self, py::object on_complete) {
            _self.Completed([on_complete](const IAsyncOperation<{{c.cppname}}> &op, AsyncStatus status) { default_on_complete(op, status, on_complete); });
        })
    ;
{% elif c.kind == "control" %}
    py::class_<{{c.cppname}}, ::pywinui::holder<{{c.cppname}}>{{c.basespec}}>(m, "{{c.fullname}}")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<{{c.cppname}}>()); }))
        .def("__repr__", [](const {{c.cppname}}& _self) { return default_repr(_self); } )
{% for name, member in c.members.items() %}
{% if member.kind == "getset" %}
        .def_property("{{name}}", [](const {{c.cppname}}& _self) { return ::pywinui::hold({{member.pre}}(_self.{{name}}()){{member.post}}); }, []({{c.cppname}}& _self, typename arg_type<decltype(_self.{{name}}())>::type v) { return _self.{{name}}(v); })
{% elif member.kind == "field" %}
        .def_property("{{name}}", [](const {{c.cppname}}& _self) { return ::pywinui::hold({{member.pre}}(_self.{{name}}){{member.post}}); }, []({{c.cppname}}& _self, typename arg:type<{{member.type}}>::type v) { _self.{{name}} = v; })
{% elif member.kind == "get" %}
        .def_property_readonly("{{name}}", [](const {{c.cppname}}& _self) { return ::pywinui::hold({{member.pre}}(_self.{{name}}()){{member.post}}); })
{% elif member.kind == "call" %}
        .def("{{name}}", []({{c.cppname}}& _self{{member.prototype}}) { return ::pywinui::call_and_hold([&]() { return _self.{{name}}({{member.argspec}}); }); })
{% endif %}
{% endfor %}
    ;
{% endif %}
{% endfor %}
}

