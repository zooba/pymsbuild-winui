import jinja2
import sys

from pathlib import Path

ROOT = Path(__file__).absolute().parent
OUTPUT = ROOT.parent / "pymsbuild_winui" / "targets" / "xaml_controls.cpp"

RENDER_ENV = jinja2.Environment(
    loader=jinja2.FileSystemLoader(ROOT),
    trim_blocks=True,
)


class CALL:
    kind = "call"
    def __init__(self, pre="", post="", **kwargs):
        self.pre = pre
        self.post = post
        self.args = list(kwargs.items())
        self.prototype = "".join(f", {v} {k}" for k, v in self.args)
        self.argspec = ", ".join(f"{k}" for k, v in self.args)

class GET:
    kind = "get"
    def __init__(self, type, pre="", post=""):
        self.type = type
        self.pre = pre
        self.post = post

class GETSET(GET):
    kind = "getset"

class FIELD(GET):
    kind = "field"


ANY = "IInspectable"
STR = "std::wstring"

ENUMS = dict(
    ContentDialogResult=["None", "Primary", "Secondary"],
    MediaPlaybackState=["None", "Opening", "Buffering", "Playing", "Paused"],
)

OPERATIONS = dict(
    ContentDialogResult={},
)

CONTROLS = dict(
    AnchorRequestedEventArgs={
        "Anchor": GET("UIElement"),
        "AnchorCandidates": GET("std::vector<UIElement>"),
    },
    AnimatedIcon={},
    AnimatedIconSource={},
    AnimatedVisualPlayer={},
    AnnotatedScrollBar={},
    AnnotatedScrollBarDetailLabelRequestedEventArgs={
        "Content": GETSET(ANY),
        "ScrollOffset": GET("double"),
    },
    AnnotatedScrollBarLabel={},
    AnnotatedScrollBarScrollingEventArgs={},
    AppBar={"__base__": "ContentControl"},
    AppBarButton={},
    AppBarElementContainer={"__base__": "ContentControl"},
    AppBarSeparator={},
    AppBarToggleButton={"__base__": "ContentControl"},
    AutoSuggestBox={},
    AutoSuggestBoxQuerySubmittedEventArgs={
        "ChosenSuggestion": GET(ANY),
        "QueryText": GET(STR),
    },
    AutoSuggestBoxSuggestionChosenEventArgs={
        "SelectedItem": GET(ANY),
    },
    AutoSuggestBoxTextChangedEventArgs={
        "CheckCurrent": CALL(),
        "Reason": GET("int"),
    },
    BitmapIcon={},
    BitmapIconSource={},
    Border={},
    BreadcrumbBar={},
    BreadcrumbBarItem={"__base__": "ContentControl"},
    BreadcrumbBarItemClickedEventArgs={
        "Index": GET("int"),
        "Item": GET(ANY),
    },
    Button={"__base__": "ContentControl"},
    CalendarDatePicker={
        "Date": GETSET("DateTime", post=".try_as<DateTime>()"),
        "MaxDate": GETSET("DateTime"),
        "MinDate": GETSET("DateTime"),
        "SetDisplayDate": CALL(date="DateTime"),
    },
    CalendarDatePickerDateChangedEventArgs={
        "NewDate": GET("DateTime", post=".try_as<DateTime>()"),
        "OldDate": GET("DateTime", post=".try_as<DateTime>()"),
    },
    CalendarView={
        #"SelectedDates": GET("std::vector<DateTime>"),
        #"SetDisplayDate": CALL(date="DateTime"),
    },
    CalendarViewDayItem={},
    CalendarViewDayItemChangingEventArgs={},
    CalendarViewSelectedDatesChangedEventArgs={},
    CandidateWindowBoundsChangedEventArgs={},
    Canvas={},
    CheckBox={"__base__": "ContentControl"},
    ChoosingGroupHeaderContainerEventArgs={},
    ChoosingItemContainerEventArgs={},
    CleanUpVirtualizedItemEventArgs={},
    Color={
        "__namespace__": "Windows.UI",
        "A": FIELD("uint8_t"),
        "R": FIELD("uint8_t"),
        "G": FIELD("uint8_t"),
        "B": FIELD("uint8_t"),
    },
    ColorChangedEventArgs={
        "NewColor": GET("Color"),
        "OldColor": GET("Color"),
    },
    ColorPicker={
        "Color": GETSET("Color"),
    },
    ColumnDefinition={},
    ColumnDefinitionCollection={},
    ComboBox={},
    ComboBoxItem={"__base__": "ContentControl"},
    ComboBoxTextSubmittedEventArgs={},
    CommandBar={},
    CommandBarFlyout={},
    CommandBarOverflowPresenter={},
    ContainerContentChangingEventArgs={},
    ContentControl={"Content": GETSET(ANY)},
    ContentDialog={
        "__base__": "ContentControl",
        "CloseButtonText": GETSET(STR),
        "PrimaryButtonText": GETSET(STR),
        "SecondaryButtonText": GETSET(STR),
        "Title": GETSET(ANY),
        "ShowAsync": CALL(),
    },
    ContentDialogButtonClickDeferral={},
    ContentDialogButtonClickEventArgs={},
    ContentDialogClosedEventArgs={},
    ContentDialogClosingDeferral={},
    ContentDialogClosingEventArgs={},
    ContentDialogOpenedEventArgs={},
    ContentPresenter={},
    ContextMenuEventArgs={},
    Control={},
    ControlTemplate={},
    CoreWebView2InitializedEventArgs={},
    DataTemplateSelector={},
    DatePickedEventArgs={},
    DatePicker={},
    DatePickerFlyout={},
    DatePickerFlyoutItem={},
    DatePickerFlyoutPresenter={},
    DatePickerSelectedValueChangedEventArgs={},
    DatePickerValueChangedEventArgs={},
    DragItemsCompletedEventArgs={},
    DragItemsStartingEventArgs={},
    DropDownButton={},
    DynamicOverflowItemsChangingEventArgs={},
    Expander={"__base__": "ContentControl"},
    ExpanderCollapsedEventArgs={},
    ExpanderExpandingEventArgs={},
    ExpanderTemplateSettings={},
    FlipView={},
    FlipViewItem={"__base__": "ContentControl"},
    Flyout={},
    FlyoutPresenter={"__base__": "ContentControl"},
    FocusDisengagedEventArgs={},
    FocusEngagedEventArgs={},
    FontIcon={},
    FontIconSource={},
    Frame={"__base__": "ContentControl"},
    Grid={},
    GridView={},
    GridViewHeaderItem={},
    GridViewItem={"__base__": "ContentControl"},
    GroupItem={"__base__": "ContentControl"},
    GroupStyle={},
    GroupStyleSelector={},
    HasValidationErrorsChangedEventArgs={},
    Hub={},
    HubSection={},
    HubSectionCollection={},
    HubSectionHeaderClickEventArgs={},
    HyperlinkButton={"__base__": "ContentControl"},
    IconElement={},
    IconSource={},
    IconSourceElement={},
    Image={},
    ImageIcon={},
    ImageIconSource={},
    InfoBadge={},
    InfoBadgeTemplateSettings={},
    InfoBar={
        "Message": GETSET(STR),
        "IsOpen": GETSET("bool"),
    },
    InfoBarClosedEventArgs={},
    InfoBarClosingEventArgs={},
    InfoBarTemplateSettings={},
    IsTextTrimmedChangedEventArgs={},
    ItemClickEventArgs={},
    ItemCollection={},
    ItemCollectionTransition={},
    ItemCollectionTransitionCompletedEventArgs={},
    ItemCollectionTransitionProgress={},
    ItemCollectionTransitionProvider={},
    ItemContainer={},
    ItemContainerGenerator={},
    ItemsControl={},
    ItemsPanelTemplate={},
    ItemsPickedEventArgs={},
    ItemsPresenter={},
    ItemsRepeater={},
    ItemsRepeaterElementClearingEventArgs={},
    ItemsRepeaterElementIndexChangedEventArgs={},
    ItemsRepeaterElementPreparedEventArgs={},
    ItemsRepeaterScrollHost={},
    ItemsSourceView={},
    ItemsStackPanel={},
    ItemsView={},
    ItemsViewItemInvokedEventArgs={},
    ItemsViewSelectionChangedEventArgs={},
    ItemsWrapGrid={},
    Layout={},
    LayoutContext={},
    LinedFlowLayout={},
    LinedFlowLayoutItemCollectionTransitionProvider={},
    LinedFlowLayoutItemsInfoRequestedEventArgs={},
    ListBox={},
    ListBoxItem={"__base__": "ContentControl"},
    ListPickerFlyout={},
    ListPickerFlyoutPresenter={},
    ListView={},
    ListViewBase={},
    ListViewBaseHeaderItem={"__base__": "ContentControl"},
    ListViewHeaderItem={},
    ListViewItem={"__base__": "ContentControl"},
    ListViewPersistenceHelper={},
    MediaPlaybackSession={
        "__namespace__": "Windows.Media.Playback",
        "NaturalDuration": GET("TimeSpan"),
        "PlaybackState": GET("MediaPlaybackState"),
        "Position": GET("TimeSpan"),  # technically GETSET but cannot cast yet
    },
    MediaPlayer={
        "__namespace__": "Windows.Media.Playback",
        "PlaybackSession": GET("MediaPlaybackSession"),
        "Pause": CALL(),
        "Play": CALL(),
        "StepBackwardOneFrame": CALL(),
        "StepForwardOneFrame": CALL(),
    },
    MediaPlayerElement={
        "MediaPlayer": GET("MediaPlayer"),
    },
    MediaPlayerPresenter={},
    MediaTransportControls={},
    MediaTransportControlsHelper={},
    MenuBar={},
    MenuBarItem={},
    MenuBarItemFlyout={},
    MenuFlyout={},
    MenuFlyoutItem={},
    MenuFlyoutItemBase={},
    MenuFlyoutPresenter={},
    MenuFlyoutSeparator={},
    MenuFlyoutSubItem={},
    NavigationView={"__base__": "ContentControl"},
    NavigationViewBackRequestedEventArgs={},
    NavigationViewDisplayModeChangedEventArgs={},
    NavigationViewItem={},
    NavigationViewItemBase={"__base__": "ContentControl"},
    NavigationViewItemCollapsedEventArgs={},
    NavigationViewItemExpandingEventArgs={},
    NavigationViewItemHeader={},
    NavigationViewItemInvokedEventArgs={},
    NavigationViewItemSeparator={},
    NavigationViewPaneClosingEventArgs={},
    NavigationViewSelectionChangedEventArgs={},
    NavigationViewTemplateSettings={},
    NonVirtualizingLayout={},
    NonVirtualizingLayoutContext={},
    NumberBox={},
    NumberBoxValueChangedEventArgs={},
    Page={},
    Panel={},
    ParallaxView={},
    PasswordBox={},
    PasswordBoxPasswordChangingEventArgs={},
    PathIcon={},
    PathIconSource={},
    PersonPicture={},
    PersonPictureTemplateSettings={},
    PickerConfirmedEventArgs={},
    PickerFlyout={},
    PickerFlyoutPresenter={"__base__": "ContentControl"},
    PipsPager={},
    PipsPagerSelectedIndexChangedEventArgs={},
    PipsPagerTemplateSettings={},
    Pivot={},
    PivotItem={"__base__": "ContentControl"},
    PivotItemEventArgs={},
    PointerRoutedEventArgs={"__namespace__":"Microsoft.UI.Xaml.Input"},
    ProgressBar={},
    ProgressBarTemplateSettings={},
    ProgressRing={},
    ProgressRingTemplateSettings={},
    RadioButton={"__base__": "ContentControl"},
    RadioButtons={},
    RadioMenuFlyoutItem={},
    RatingControl={},
    RatingItemFontInfo={},
    RatingItemImageInfo={},
    RatingItemInfo={},
    RefreshContainer={"__base__": "ContentControl"},
    RefreshInteractionRatioChangedEventArgs={},
    RefreshRequestedEventArgs={},
    RefreshStateChangedEventArgs={},
    RefreshVisualizer={},
    RelativePanel={},
    RevealListViewItemPresenter={},
    RichEditBox={},
    RichEditBoxSelectionChangingEventArgs={},
    RichEditBoxTextChangingEventArgs={},
    RichTextBlock={},
    RichTextBlockOverflow={},
    RoutedEventArgs={},
    RowDefinition={},
    RowDefinitionCollection={},
    ScrollContentPresenter={},
    ScrollingAnchorRequestedEventArgs={},
    ScrollingBringingIntoViewEventArgs={},
    ScrollingScrollAnimationStartingEventArgs={},
    ScrollingScrollCompletedEventArgs={},
    ScrollingScrollOptions={},
    ScrollingZoomAnimationStartingEventArgs={},
    ScrollingZoomCompletedEventArgs={},
    ScrollingZoomOptions={},
    ScrollView={},
    ScrollViewer={"__base__": "ContentControl"},
    ScrollViewerView={},
    ScrollViewerViewChangedEventArgs={},
    ScrollViewerViewChangingEventArgs={},
    SectionsInViewChangedEventArgs={},
    SelectionChangedEventArgs={},
    SemanticZoom={},
    SemanticZoomLocation={},
    SemanticZoomViewChangedEventArgs={},
    Slider={},
    SplitButton={"__base__": "ContentControl"},
    SplitButtonClickEventArgs={},
    SplitView={},
    SplitViewPaneClosingEventArgs={},
    StackLayout={},
    StackPanel={},
    StyleSelector={},
    SwapChainPanel={},
    SwipeControl={"__base__": "ContentControl"},
    SwipeItem={},
    SwipeItemInvokedEventArgs={},
    SwipeItems={},
    SymbolIcon={},
    SymbolIconSource={},
    TabView={},
    TabViewItem={},
    TabViewItemTemplateSettings={},
    TabViewTabCloseRequestedEventArgs={},
    TabViewTabDragCompletedEventArgs={},
    TabViewTabDragStartingEventArgs={},
    TabViewTabDroppedOutsideEventArgs={},
    TeachingTip={"__base__": "ContentControl"},
    TeachingTipClosedEventArgs={},
    TeachingTipClosingEventArgs={},
    TeachingTipTemplateSettings={},
    TextBlock={},
    TextBox={},
    TextBoxBeforeTextChangingEventArgs={},
    TextBoxSelectionChangingEventArgs={},
    TextBoxTextChangingEventArgs={},
    TextChangedEventArgs={},
    TextCommandBarFlyout={},
    TextCompositionChangedEventArgs={},
    TextCompositionEndedEventArgs={},
    TextCompositionStartedEventArgs={},
    TextControlCopyingToClipboardEventArgs={},
    TextControlCuttingToClipboardEventArgs={},
    TextControlPasteEventArgs={},
    TimePickedEventArgs={},
    TimePicker={},
    TimePickerFlyout={},
    TimePickerFlyoutPresenter={},
    TimePickerSelectedValueChangedEventArgs={},
    TimePickerValueChangedEventArgs={},
    ToggleMenuFlyoutItem={},
    ToggleSplitButton={},
    ToggleSplitButtonIsCheckedChangedEventArgs={},
    ToggleSwitch={},
    ToolTip={"__base__": "ContentControl"},
    ToolTipService={},
    TreeView={},
    TreeViewCollapsedEventArgs={},
    TreeViewDragItemsCompletedEventArgs={},
    TreeViewDragItemsStartingEventArgs={},
    TreeViewExpandingEventArgs={},
    TreeViewItem={},
    TreeViewItemInvokedEventArgs={},
    TreeViewItemTemplateSettings={},
    TreeViewList={},
    TreeViewNode={},
    TreeViewSelectionChangedEventArgs={},
    TwoPaneView={},
    UIElementCollection={},
    UniformGridLayout={},
    UserControl={},
    VariableSizedWrapGrid={},
    Viewbox={},
    VirtualizingLayout={},
    VirtualizingLayoutContext={},
    VirtualizingPanel={},
    VirtualizingStackPanel={},
    WebView2={},
    WrapGrid={},
    XamlControlsResources={},
)

def resolve_bases(d):
    resolved = {}
    for k, v in CONTROLS.items():
        base = v.get("__base__")
        while base:
            v = {**CONTROLS[base], **v}
            v.pop("__base__", None)
            base = CONTROLS[base].get("__base__")
        resolved[k] = v
    return resolved
CONTROLS = resolve_bases(CONTROLS)

CONTEXT = dict(
    all_controls=CONTROLS,
    operations=OPERATIONS,
    enums=ENUMS,
)

with open(OUTPUT, "w", encoding="ascii") as f:
    for s in RENDER_ENV.get_template("controls.cpp.in").generate(CONTEXT):
        f.write(s)
