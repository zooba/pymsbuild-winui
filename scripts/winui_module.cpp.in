// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"

{% for c in all_types %}
{% if c.kind == "runtimeclass" and "__implements__" in c.members %}
template <> struct cvt<{{c.cppname}}>  {
    typedef {{c.cppname}} natural_t;
    typedef const natural_t& cself_t;
    typedef natural_t& self_t;
    typedef typename ::pywinui::holder<natural_t> py_t;
    typedef typename IInspectable arg_t;
    typedef cvt<{{c.cppname}}> param_t;
    std::optional<natural_t> value;
    cvt(arg_t t) : value(t.try_as<natural_t>()) { }
    py_t ret() { return ::pywinui::holder<natural_t>(value.value_or(nullptr)); }
    operator py_t () const { return ::pywinui::holder<natural_t>(value.value_or(nullptr)); }
    operator const natural_t & () const { return value.value_or(nullptr); }
{% for intf in c.members["__implements__"] %}
    operator {{intf}} () const { return value ? value->as<{{intf}}>() : nullptr; }
{% endfor %}
};

{% endif %}
{% endfor %}

PYBIND11_EMBEDDED_MODULE({{module}}, m) {
{% for c in module_types %}
{% if c.kind == "enum" %}
    py::enum_<{{c.cppname}}>(m, "{{c.fullname}}")
{% for name in c.members %}
        .value("{{name}}", {{c.cppname}}::{{name}})
{% endfor %}
    ;
{% endif %}
{% endfor %}

{% for c in module_types %}
{% if c.kind == "asyncop" %}
    py::class_<IAsyncOperation<{{c.cppname}}>, ::pywinui::holder<IAsyncOperation<{{c.cppname}}>>>(m, "Windows.Foundation.IAsyncOperation<{{c.fullname}}")
        .def("GetResults", [](const IAsyncOperation<{{c.cppname}}> &_self) { return ::pywinui::hold(_self.GetResults()); })
        .def("Completed", [](IAsyncOperation<{{c.cppname}}> &_self, py::object on_complete) {
            _self.Completed([on_complete](const IAsyncOperation<{{c.cppname}}> &op, AsyncStatus status) { default_on_complete(op, status, on_complete); });
        })
    ;
{% elif c.kind == "runtimeclass" %}
    py::class_<{{c.cppname}}, ::pywinui::holder<{{c.cppname}}>{{c.basespec}}>(m, "{{c.fullname}}")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<{{c.cppname}}>()); }))
        .def("__repr__", [](typename cvt<{{c.cppname}}>::cself_t _self) { return default_repr(cvt<{{c.cppname}}>(_self)); } )
{% for name, member in c.members.items() %}
{% if member.kind == "getset" %}
        .def_property("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}()); }, [](typename cvt<{{c.cppname}}>::self_t _self, typename cvt<decltype(_self.{{name}}())>::arg_t v) { cvt<decltype(_self.{{name}}())>::param_t cvt_v{v}; _self.{{name}}(cvt_v); })
{% elif member.kind == "field" %}
        .def_property("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}); }, [](typename cvt<{{c.cppname}}>::self_t _self, typename cvt<{{member.type}}>::arg_t v) { _self.{{name}} = cvt<{{member.type}}>(v); })
{% elif member.kind == "get" %}
        .def_property_readonly("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}()); })
{% elif member.kind == "call" %}
{% if name == "__init__" %}
        .def(py::init([]({% for a in member.args %}typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{{'' if loop.last else ', '}}{% endfor %}) { {% for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor %}{{c.cppname}} inst{ {% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %} }; return cvt_out(inst); }))
{% else %}
        .def("{{name}}", [](typename cvt<{{c.cppname}}>::self_t _self
            {%- for a in member.args %}, typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{% endfor -%}
            ) {
            {%- for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor %}
            {%- if member.void %}ensure_void<decltype(_self.{{name}}({%- for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor -%}))> ensure; (void)ensure;
            {%- else %}return cvt_out{% endif -%}
            (_self.{{name}}({% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %})); })
{% endif %}
{% endif %}
{% endfor %}
    ;
{% endif %}
{% endfor %}
}

