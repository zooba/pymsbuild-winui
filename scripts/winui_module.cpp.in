// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"

{% for c in all_types %}
{% if c.kind == "runtimeclass" and "__implements__" in c.members %}
template <> struct cvt<{{c.cppname}}>  {
    typedef {{c.cppname}} natural_t;
    typedef const natural_t& cself_t;
    typedef natural_t& self_t;
    typedef typename ::pywinui::holder<natural_t> py_t;
    typedef typename IInspectable arg_t;
    typedef cvt<{{c.cppname}}> param_t;
    std::optional<natural_t> value;
    cvt(arg_t t) : value(t.try_as<natural_t>()) { }
    py_t ret() { return ::pywinui::holder<natural_t>(value.value_or(nullptr)); }
    operator py_t () const { return ::pywinui::holder<natural_t>(value.value_or(nullptr)); }
    operator const natural_t & () const { return value.value_or(nullptr); }
{% for intf in c.members["__implements__"] %}
    operator {{intf}} () const { return value ? value->as<{{intf}}>() : nullptr; }
{% endfor %}
};

{% elif c.kind == "callback" %}
{#struct {{c.backing_name}} {
    ~{{c.backing_name}}() { py::gil_scoped_acquire _g; callbacks.release(); }
    py::object callbacks;
};

template<> struct cvt<{{c.cppname}}> {
    typedef {{c.cppname}} natural_t;
    typedef const natural_t& cself_t;
    typedef natural_t& self_t;
    
    typedef py::object arg_t;
};
#}
{% endif %}
{% endfor %}

PYBIND11_EMBEDDED_MODULE({{module}}, m) {
{% for c in module_types %}
{% if c.kind == "enum" %}
    py::enum_<{{c.cppname}}>(m, "{{c.fullname}}")
{% for name in c.members %}
        .value("{{name}}", {{c.cppname}}::{{name}})
{% endfor %}
    ;
{% endif %}
{% endfor %}

{% for c in module_types %}
{% if c.kind == "asyncop" %}
    py::class_<IAsyncOperation<{{c.cppname}}>, ::pywinui::holder<IAsyncOperation<{{c.cppname}}>>>(m, "Windows.Foundation.IAsyncOperation<{{c.fullname}}")
        .def("GetResults", [](const IAsyncOperation<{{c.cppname}}> &_self) { return ::pywinui::hold(_self.GetResults()); })
        .def("Completed", [](IAsyncOperation<{{c.cppname}}> &_self, py::object on_complete) {
            _self.Completed([on_complete](const IAsyncOperation<{{c.cppname}}> &op, AsyncStatus status) { default_on_complete(op, status, on_complete); });
        })
    ;
{% elif c.kind == "callback" %}
    py::class_<{{c.cppname}}, ::pywinui::holder<{{c.cppname}}>>(m, "{{c.fullname}}")
        .def(py::init([](py::object callable) {
            {%- if c.void == True %}static_assert(ensure_Invoke_void<decltype(&::winrt::get_abi<{{c.cppname}}>(nullptr)->Invoke)>::value, "return value is not void"); {% endif %}
            {{-c.cppname}} inst{[callable](
                {%- for a in c.args %}typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{{'' if loop.last else ', '}}{% endfor -%}
            ) {
                {{-''}}py::gil_scoped_acquire _g;{{' '}}
                {%- for a in c.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{-a.name-}} }; {% endfor %}
                {%- if not c.void %}return cvt_out({% endif -%}
                callable({% for a in c.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %})
                {%- if not c.void %}){% endif %};{{''-}}
            } };{{' '-}}
            return ::pywinui::hold(inst);{{' '-}}
        }))
    ;
{% elif c.kind == "runtimeclass" %}
    py::class_<{{c.cppname}}, ::pywinui::holder<{{c.cppname}}>{{c.basespec}}>(m, "{{c.fullname}}")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<{{c.cppname}}>()); }))
        .def("__repr__", [](typename cvt<{{c.cppname}}>::cself_t _self) { return default_repr(cvt<{{c.cppname}}>(_self)); } )
{% for name, member in c.members.items() %}
{% if member.kind == "getset" %}
        .def_property("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}()); }, [](typename cvt<{{c.cppname}}>::self_t _self, typename cvt<decltype(_self.{{name}}())>::arg_t v) { cvt<decltype(_self.{{name}}())>::param_t cvt_v{v}; _self.{{name}}(cvt_v); })
{% elif member.kind == "field" %}
        .def_property("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}); }, [](typename cvt<{{c.cppname}}>::self_t _self, typename cvt<{{member.type}}>::arg_t v) { _self.{{name}} = cvt<{{member.type}}>(v); })
{% elif member.kind == "get" %}
        .def_property_readonly("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}()); })
{% elif member.kind == "call" %}
{% if name == "__init__" %}
        .def(py::init([]({% for a in member.args %}typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{{'' if loop.last else ', '}}{% endfor %}) { {% for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor %}{{c.cppname}} inst{ {% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %} }; return cvt_out(inst); }))
{% else %}
        .def("{{name}}", [](typename cvt<{{c.cppname}}>::self_t _self
            {%- for a in member.args %}, typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{% endfor -%}
            ) {
            {%- for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor %}
            {%- if member.void == True %}static_assert(ensure_void<decltype(&{{c.cppname}}::{{name}})>::value, "return value is not void"); {% endif -%}
            {%- if not member.void %}return cvt_out({% endif -%}
            _self.{{name}}({% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %})
            {%- if not member.void %}){% endif %}; })
{% endif %}
{% elif member.kind == "event" %}
        .def("{{name}}", [](typename cvt<{{c.cppname}}>::self_t _self, py::object handler) { {{''-}}
            _self.{{name}}([handler]({% for a in member.args %}typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{{'' if loop.last else ', '}}{% endfor %}) { {{''-}}
                py::gil_scoped_acquire _g; {{''-}}
                {% for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor -%}
                try { handler({% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %}); } catch (py::error_already_set &eas) { AllocConsole(); eas.discard_as_unraisable("{{c.fullname}}.{{name}}"); }{{''-}}
            });{{' '-}}
        })
{% endif %}
{% endfor %}
    ;
{% endif %}
{% endfor %}
}

