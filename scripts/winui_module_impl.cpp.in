// ****************************************************** //
// Generated by scripts\controls.py
// ****************************************************** //
#include "pch.h"
#include "_winui.h"
#include <winrt/{{namespace}}.h>

{% for c in module_types %}
void add_{{c.kind}}_{{c.cppname.replace('::', '_')}}(const py::module_ &m) {
{% if c.kind == "enum" %}
    py::enum_<{{c.cppname}}>(m, "{{c.fullname}}")
{% for name in c.members %}
        .value("{{name}}", {{c.cppname}}::{{name}})
{% endfor %}
    ;
{% elif c.kind == "asyncio" %}
{% set optype="IAsyncOperation<" + c.cppname + ">" %}
    py::class_<{{optype}}, ::pywinui::holder<{{optype}}>>(m, "Windows.Foundation.IAsyncOperation<{{c.fullname}}>")
        .def("__repr__", [](typename cvt<{{optype}}>::cself_t _self) { return cvt<{{optype}}>(_self).repr(); })
        .def("GetResults", [](typename cvt<{{optype}}>::cself_t _self) { return cvt_out(_self.GetResults()); })
        .def("Completed", [](typename cvt<{{optype}}>::self_t _self, py::object on_complete) { _self.Completed(asyncop_completer<{{c.cppname}}>(on_complete)); })
    ;
{% elif c.kind == "callback" %}
    py::class_<{{c.cppname}}, ::pywinui::holder<{{c.cppname}}>>(m, "{{c.fullname}}")
        .def(py::init([](py::object callable) {
            {%- if c.void == True %}static_assert(ensure_Invoke_void<decltype(&::winrt::get_abi<{{c.cppname}}>(nullptr)->Invoke)>::value, "return value is not void"); {% endif %}
            {{-c.cppname}} inst{[callable](
                {%- for a in c.args %}typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{{'' if loop.last else ', '}}{% endfor -%}
            ) {
                {{-''}}py::gil_scoped_acquire _g;{{' '}}
                {%- for a in c.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{-a.name-}} }; {% endfor %}
                {%- if not c.void %}return cvt_out({% endif -%}
                callable({% for a in c.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %})
                {%- if not c.void %}){% endif %};{{''-}}
            } };{{' '-}}
            return ::pywinui::hold(inst);{{' '-}}
        }))
        .def("__repr__", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt<{{c.cppname}}>(_self).repr(); })
    ;
{% elif c.kind == "runtimeclass" %}
    py::class_<{{c.cppname}}, ::pywinui::holder<{{c.cppname}}>{{c.basespec}}>(m, "{{c.fullname}}")
        .def(py::init([](const ::winrt::Windows::Foundation::IInspectable &unk) { return ::pywinui::hold(unk.as<{{c.cppname}}>()); }))
        .def("__repr__", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt<{{c.cppname}}>(_self).repr(); })
{% for name, member in c.members.items() %}
{% if member.kind == "getset" %}
        .def_property("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}()); }, [](typename cvt<{{c.cppname}}>::self_t _self, typename cvt<decltype(_self.{{name}}())>::arg_t v) { cvt<decltype(_self.{{name}}())>::param_t cvt_v{v}; _self.{{name}}(cvt_v); })
{% elif member.kind == "field" %}
        .def_property("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}); }, [](typename cvt<{{c.cppname}}>::self_t _self, typename cvt<{{member.type}}>::arg_t v) { _self.{{name}} = cvt<{{member.type}}>(v); })
{% elif member.kind == "get" %}
        .def_property_readonly("{{name}}", [](typename cvt<{{c.cppname}}>::cself_t _self) { return cvt_out(_self.{{name}}()); })
{% elif member.kind == "call" %}
{% if name == "__init__" %}
        .def(py::init([]({% for a in member.args %}typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{{'' if loop.last else ', '}}{% endfor %}) { {% for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor %}{{c.cppname}} inst{ {% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %} }; return cvt_out(inst); }))
{% else %}
        .def("{{name}}", [](typename cvt<{{c.cppname}}>::self_t _self
            {%- for a in member.args %}, typename cvt<{{a.cpptype}}>::arg_t {{a.name}}{% endfor -%}
            ) {
            {%- for a in member.args %}cvt<{{a.cpptype}}>::param_t cvt_{{a.name}}{ {{a.name}} }; {% endfor %}
            {%- if member.void == True %}static_assert(ensure_void<decltype(&{{c.cppname}}::{{name}})>::value, "return value is not void"); {% endif -%}
            {%- if not member.void %}return cvt_out({% endif -%}
            _self.{{name}}({% for a in member.args %}cvt_{{a.name}}{{'' if loop.last else ', '}}{% endfor %})
            {%- if not member.void %}){% endif %}; })
{% endif %}
{% elif member.kind == "event" %}
        .def("{{name}}", [](typename cvt<{{c.cppname}}>::self_t _self, py::object handler) { {{''-}}
            _self.{{name}}(event_handler<{% for a in member.args %}{{a.cpptype}}{{'' if loop.last else ', '}}{% endfor %}>(handler));
        })
{% endif %}
{% endfor %}
    ;
{% endif %}
}

{% endfor %}
